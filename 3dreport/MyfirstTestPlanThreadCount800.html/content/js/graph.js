/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 13564.0, "series": [{"data": [[0.0, 72.0], [0.1, 72.0], [0.2, 75.0], [0.3, 78.0], [0.4, 78.0], [0.5, 79.0], [0.6, 79.0], [0.7, 80.0], [0.8, 82.0], [0.9, 82.0], [1.0, 85.0], [1.1, 85.0], [1.2, 90.0], [1.3, 92.0], [1.4, 95.0], [1.5, 96.0], [1.6, 96.0], [1.7, 99.0], [1.8, 101.0], [1.9, 102.0], [2.0, 102.0], [2.1, 102.0], [2.2, 103.0], [2.3, 103.0], [2.4, 104.0], [2.5, 105.0], [2.6, 105.0], [2.7, 105.0], [2.8, 106.0], [2.9, 106.0], [3.0, 106.0], [3.1, 106.0], [3.2, 107.0], [3.3, 107.0], [3.4, 108.0], [3.5, 108.0], [3.6, 108.0], [3.7, 108.0], [3.8, 108.0], [3.9, 109.0], [4.0, 109.0], [4.1, 109.0], [4.2, 109.0], [4.3, 111.0], [4.4, 112.0], [4.5, 112.0], [4.6, 112.0], [4.7, 116.0], [4.8, 118.0], [4.9, 120.0], [5.0, 122.0], [5.1, 122.0], [5.2, 123.0], [5.3, 123.0], [5.4, 124.0], [5.5, 127.0], [5.6, 127.0], [5.7, 128.0], [5.8, 128.0], [5.9, 128.0], [6.0, 131.0], [6.1, 131.0], [6.2, 132.0], [6.3, 139.0], [6.4, 143.0], [6.5, 148.0], [6.6, 148.0], [6.7, 152.0], [6.8, 153.0], [6.9, 154.0], [7.0, 165.0], [7.1, 165.0], [7.2, 166.0], [7.3, 166.0], [7.4, 178.0], [7.5, 178.0], [7.6, 178.0], [7.7, 179.0], [7.8, 186.0], [7.9, 190.0], [8.0, 191.0], [8.1, 191.0], [8.2, 193.0], [8.3, 194.0], [8.4, 195.0], [8.5, 198.0], [8.6, 198.0], [8.7, 198.0], [8.8, 200.0], [8.9, 200.0], [9.0, 202.0], [9.1, 202.0], [9.2, 203.0], [9.3, 203.0], [9.4, 205.0], [9.5, 207.0], [9.6, 207.0], [9.7, 208.0], [9.8, 209.0], [9.9, 210.0], [10.0, 211.0], [10.1, 211.0], [10.2, 212.0], [10.3, 214.0], [10.4, 227.0], [10.5, 227.0], [10.6, 227.0], [10.7, 227.0], [10.8, 238.0], [10.9, 245.0], [11.0, 245.0], [11.1, 245.0], [11.2, 245.0], [11.3, 248.0], [11.4, 249.0], [11.5, 253.0], [11.6, 253.0], [11.7, 254.0], [11.8, 255.0], [11.9, 265.0], [12.0, 269.0], [12.1, 269.0], [12.2, 276.0], [12.3, 283.0], [12.4, 302.0], [12.5, 309.0], [12.6, 309.0], [12.7, 320.0], [12.8, 326.0], [12.9, 333.0], [13.0, 343.0], [13.1, 343.0], [13.2, 357.0], [13.3, 359.0], [13.4, 367.0], [13.5, 374.0], [13.6, 374.0], [13.7, 374.0], [13.8, 377.0], [13.9, 380.0], [14.0, 381.0], [14.1, 381.0], [14.2, 393.0], [14.3, 397.0], [14.4, 409.0], [14.5, 415.0], [14.6, 415.0], [14.7, 428.0], [14.8, 441.0], [14.9, 448.0], [15.0, 454.0], [15.1, 454.0], [15.2, 457.0], [15.3, 460.0], [15.4, 473.0], [15.5, 476.0], [15.6, 476.0], [15.7, 476.0], [15.8, 476.0], [15.9, 477.0], [16.0, 478.0], [16.1, 478.0], [16.2, 479.0], [16.3, 482.0], [16.4, 484.0], [16.5, 485.0], [16.6, 485.0], [16.7, 494.0], [16.8, 498.0], [16.9, 529.0], [17.0, 540.0], [17.1, 540.0], [17.2, 542.0], [17.3, 546.0], [17.4, 548.0], [17.5, 556.0], [17.6, 556.0], [17.7, 557.0], [17.8, 558.0], [17.9, 558.0], [18.0, 562.0], [18.1, 562.0], [18.2, 565.0], [18.3, 565.0], [18.4, 565.0], [18.5, 567.0], [18.6, 567.0], [18.7, 568.0], [18.8, 570.0], [18.9, 570.0], [19.0, 571.0], [19.1, 571.0], [19.2, 573.0], [19.3, 576.0], [19.4, 583.0], [19.5, 584.0], [19.6, 584.0], [19.7, 585.0], [19.8, 586.0], [19.9, 588.0], [20.0, 588.0], [20.1, 588.0], [20.2, 590.0], [20.3, 594.0], [20.4, 596.0], [20.5, 596.0], [20.6, 596.0], [20.7, 597.0], [20.8, 599.0], [20.9, 600.0], [21.0, 603.0], [21.1, 603.0], [21.2, 620.0], [21.3, 624.0], [21.4, 641.0], [21.5, 646.0], [21.6, 646.0], [21.7, 650.0], [21.8, 653.0], [21.9, 665.0], [22.0, 730.0], [22.1, 730.0], [22.2, 741.0], [22.3, 741.0], [22.4, 743.0], [22.5, 743.0], [22.6, 743.0], [22.7, 750.0], [22.8, 751.0], [22.9, 751.0], [23.0, 763.0], [23.1, 763.0], [23.2, 771.0], [23.3, 772.0], [23.4, 772.0], [23.5, 775.0], [23.6, 775.0], [23.7, 786.0], [23.8, 786.0], [23.9, 789.0], [24.0, 801.0], [24.1, 801.0], [24.2, 827.0], [24.3, 829.0], [24.4, 831.0], [24.5, 895.0], [24.6, 895.0], [24.7, 896.0], [24.8, 919.0], [24.9, 926.0], [25.0, 926.0], [25.1, 926.0], [25.2, 928.0], [25.3, 931.0], [25.4, 931.0], [25.5, 933.0], [25.6, 933.0], [25.7, 940.0], [25.8, 940.0], [25.9, 941.0], [26.0, 941.0], [26.1, 941.0], [26.2, 943.0], [26.3, 950.0], [26.4, 954.0], [26.5, 958.0], [26.6, 958.0], [26.7, 966.0], [26.8, 967.0], [26.9, 970.0], [27.0, 976.0], [27.1, 976.0], [27.2, 988.0], [27.3, 989.0], [27.4, 989.0], [27.5, 991.0], [27.6, 991.0], [27.7, 996.0], [27.8, 998.0], [27.9, 1000.0], [28.0, 1000.0], [28.1, 1000.0], [28.2, 1008.0], [28.3, 1010.0], [28.4, 1012.0], [28.5, 1015.0], [28.6, 1015.0], [28.7, 1021.0], [28.8, 1024.0], [28.9, 1028.0], [29.0, 1030.0], [29.1, 1030.0], [29.2, 1031.0], [29.3, 1033.0], [29.4, 1036.0], [29.5, 1040.0], [29.6, 1040.0], [29.7, 1071.0], [29.8, 1074.0], [29.9, 1088.0], [30.0, 1092.0], [30.1, 1092.0], [30.2, 1104.0], [30.3, 1143.0], [30.4, 1164.0], [30.5, 1165.0], [30.6, 1165.0], [30.7, 1167.0], [30.8, 1187.0], [30.9, 1189.0], [31.0, 1193.0], [31.1, 1193.0], [31.2, 1196.0], [31.3, 1216.0], [31.4, 1219.0], [31.5, 1268.0], [31.6, 1268.0], [31.7, 1318.0], [31.8, 1338.0], [31.9, 1343.0], [32.0, 1394.0], [32.1, 1394.0], [32.2, 1400.0], [32.3, 1438.0], [32.4, 1448.0], [32.5, 1493.0], [32.6, 1493.0], [32.7, 1498.0], [32.8, 1575.0], [32.9, 1620.0], [33.0, 1647.0], [33.1, 1647.0], [33.2, 1681.0], [33.3, 1729.0], [33.4, 1747.0], [33.5, 1821.0], [33.6, 1821.0], [33.7, 1844.0], [33.8, 1886.0], [33.9, 1906.0], [34.0, 1930.0], [34.1, 1930.0], [34.2, 1943.0], [34.3, 1965.0], [34.4, 1978.0], [34.5, 2060.0], [34.6, 2060.0], [34.7, 2064.0], [34.8, 2092.0], [34.9, 2161.0], [35.0, 2168.0], [35.1, 2168.0], [35.2, 2186.0], [35.3, 2187.0], [35.4, 2210.0], [35.5, 2266.0], [35.6, 2266.0], [35.7, 2274.0], [35.8, 2344.0], [35.9, 2354.0], [36.0, 2430.0], [36.1, 2430.0], [36.2, 2434.0], [36.3, 2436.0], [36.4, 2446.0], [36.5, 2447.0], [36.6, 2447.0], [36.7, 2496.0], [36.8, 2498.0], [36.9, 2501.0], [37.0, 2507.0], [37.1, 2507.0], [37.2, 2544.0], [37.3, 2559.0], [37.4, 2570.0], [37.5, 2573.0], [37.6, 2573.0], [37.7, 2639.0], [37.8, 2644.0], [37.9, 2650.0], [38.0, 2694.0], [38.1, 2694.0], [38.2, 2715.0], [38.3, 2725.0], [38.4, 2728.0], [38.5, 2764.0], [38.6, 2764.0], [38.7, 2780.0], [38.8, 2782.0], [38.9, 2789.0], [39.0, 2797.0], [39.1, 2797.0], [39.2, 2815.0], [39.3, 2871.0], [39.4, 2875.0], [39.5, 2898.0], [39.6, 2898.0], [39.7, 2937.0], [39.8, 2937.0], [39.9, 2962.0], [40.0, 2963.0], [40.1, 2963.0], [40.2, 2968.0], [40.3, 3053.0], [40.4, 3072.0], [40.5, 3105.0], [40.6, 3105.0], [40.7, 3137.0], [40.8, 3139.0], [40.9, 3170.0], [41.0, 3182.0], [41.1, 3182.0], [41.2, 3187.0], [41.3, 3205.0], [41.4, 3215.0], [41.5, 3217.0], [41.6, 3217.0], [41.7, 3217.0], [41.8, 3220.0], [41.9, 3230.0], [42.0, 3246.0], [42.1, 3246.0], [42.2, 3254.0], [42.3, 3259.0], [42.4, 3263.0], [42.5, 3280.0], [42.6, 3280.0], [42.7, 3299.0], [42.8, 3313.0], [42.9, 3335.0], [43.0, 3342.0], [43.1, 3342.0], [43.2, 3367.0], [43.3, 3388.0], [43.4, 3405.0], [43.5, 3421.0], [43.6, 3421.0], [43.7, 3425.0], [43.8, 3425.0], [43.9, 3431.0], [44.0, 3438.0], [44.1, 3438.0], [44.2, 3446.0], [44.3, 3462.0], [44.4, 3472.0], [44.5, 3491.0], [44.6, 3491.0], [44.7, 3513.0], [44.8, 3527.0], [44.9, 3565.0], [45.0, 3565.0], [45.1, 3565.0], [45.2, 3572.0], [45.3, 3634.0], [45.4, 3639.0], [45.5, 3674.0], [45.6, 3674.0], [45.7, 3679.0], [45.8, 3708.0], [45.9, 3778.0], [46.0, 3779.0], [46.1, 3779.0], [46.2, 3788.0], [46.3, 3788.0], [46.4, 3793.0], [46.5, 3814.0], [46.6, 3814.0], [46.7, 3843.0], [46.8, 3849.0], [46.9, 3859.0], [47.0, 3867.0], [47.1, 3867.0], [47.2, 3896.0], [47.3, 3917.0], [47.4, 3922.0], [47.5, 3948.0], [47.6, 3948.0], [47.7, 3955.0], [47.8, 3978.0], [47.9, 3982.0], [48.0, 4000.0], [48.1, 4000.0], [48.2, 4010.0], [48.3, 4016.0], [48.4, 4043.0], [48.5, 4052.0], [48.6, 4052.0], [48.7, 4059.0], [48.8, 4063.0], [48.9, 4072.0], [49.0, 4116.0], [49.1, 4116.0], [49.2, 4170.0], [49.3, 4175.0], [49.4, 4181.0], [49.5, 4186.0], [49.6, 4186.0], [49.7, 4194.0], [49.8, 4196.0], [49.9, 4197.0], [50.0, 4203.0], [50.1, 4203.0], [50.2, 4203.0], [50.3, 4204.0], [50.4, 4264.0], [50.5, 4269.0], [50.6, 4269.0], [50.7, 4272.0], [50.8, 4305.0], [50.9, 4317.0], [51.0, 4336.0], [51.1, 4336.0], [51.2, 4337.0], [51.3, 4339.0], [51.4, 4407.0], [51.5, 4412.0], [51.6, 4412.0], [51.7, 4419.0], [51.8, 4421.0], [51.9, 4432.0], [52.0, 4438.0], [52.1, 4438.0], [52.2, 4447.0], [52.3, 4447.0], [52.4, 4450.0], [52.5, 4456.0], [52.6, 4456.0], [52.7, 4466.0], [52.8, 4466.0], [52.9, 4470.0], [53.0, 4475.0], [53.1, 4475.0], [53.2, 4479.0], [53.3, 4480.0], [53.4, 4486.0], [53.5, 4493.0], [53.6, 4493.0], [53.7, 4501.0], [53.8, 4520.0], [53.9, 4529.0], [54.0, 4531.0], [54.1, 4531.0], [54.2, 4536.0], [54.3, 4555.0], [54.4, 4558.0], [54.5, 4559.0], [54.6, 4559.0], [54.7, 4561.0], [54.8, 4565.0], [54.9, 4568.0], [55.0, 4569.0], [55.1, 4569.0], [55.2, 4570.0], [55.3, 4571.0], [55.4, 4572.0], [55.5, 4574.0], [55.6, 4574.0], [55.7, 4584.0], [55.8, 4590.0], [55.9, 4591.0], [56.0, 4598.0], [56.1, 4598.0], [56.2, 4635.0], [56.3, 4636.0], [56.4, 4640.0], [56.5, 4645.0], [56.6, 4645.0], [56.7, 4657.0], [56.8, 4661.0], [56.9, 4665.0], [57.0, 4667.0], [57.1, 4667.0], [57.2, 4668.0], [57.3, 4669.0], [57.4, 4669.0], [57.5, 4670.0], [57.6, 4670.0], [57.7, 4679.0], [57.8, 4680.0], [57.9, 4682.0], [58.0, 4684.0], [58.1, 4684.0], [58.2, 4686.0], [58.3, 4694.0], [58.4, 4696.0], [58.5, 4700.0], [58.6, 4700.0], [58.7, 4706.0], [58.8, 4707.0], [58.9, 4714.0], [59.0, 4714.0], [59.1, 4714.0], [59.2, 4716.0], [59.3, 4720.0], [59.4, 4724.0], [59.5, 4728.0], [59.6, 4728.0], [59.7, 4751.0], [59.8, 4759.0], [59.9, 4762.0], [60.0, 4765.0], [60.1, 4765.0], [60.2, 4770.0], [60.3, 4774.0], [60.4, 4776.0], [60.5, 4777.0], [60.6, 4777.0], [60.7, 4783.0], [60.8, 4785.0], [60.9, 4791.0], [61.0, 4795.0], [61.1, 4795.0], [61.2, 4800.0], [61.3, 4806.0], [61.4, 4809.0], [61.5, 4817.0], [61.6, 4817.0], [61.7, 4821.0], [61.8, 4850.0], [61.9, 4860.0], [62.0, 4867.0], [62.1, 4867.0], [62.2, 4870.0], [62.3, 4914.0], [62.4, 4970.0], [62.5, 4976.0], [62.6, 4976.0], [62.7, 4979.0], [62.8, 4988.0], [62.9, 4991.0], [63.0, 4996.0], [63.1, 4996.0], [63.2, 5005.0], [63.3, 5006.0], [63.4, 5020.0], [63.5, 5026.0], [63.6, 5026.0], [63.7, 5040.0], [63.8, 5041.0], [63.9, 5054.0], [64.0, 5060.0], [64.1, 5060.0], [64.2, 5071.0], [64.3, 5103.0], [64.4, 5115.0], [64.5, 5125.0], [64.6, 5125.0], [64.7, 5151.0], [64.8, 5171.0], [64.9, 5172.0], [65.0, 5177.0], [65.1, 5177.0], [65.2, 5179.0], [65.3, 5185.0], [65.4, 5186.0], [65.5, 5187.0], [65.6, 5187.0], [65.7, 5197.0], [65.8, 5201.0], [65.9, 5202.0], [66.0, 5218.0], [66.1, 5218.0], [66.2, 5232.0], [66.3, 5242.0], [66.4, 5242.0], [66.5, 5245.0], [66.6, 5245.0], [66.7, 5247.0], [66.8, 5250.0], [66.9, 5256.0], [67.0, 5260.0], [67.1, 5260.0], [67.2, 5265.0], [67.3, 5278.0], [67.4, 5278.0], [67.5, 5278.0], [67.6, 5278.0], [67.7, 5284.0], [67.8, 5290.0], [67.9, 5299.0], [68.0, 5317.0], [68.1, 5317.0], [68.2, 5322.0], [68.3, 5322.0], [68.4, 5328.0], [68.5, 5341.0], [68.6, 5341.0], [68.7, 5342.0], [68.8, 5344.0], [68.9, 5344.0], [69.0, 5344.0], [69.1, 5344.0], [69.2, 5351.0], [69.3, 5351.0], [69.4, 5358.0], [69.5, 5358.0], [69.6, 5358.0], [69.7, 5369.0], [69.8, 5387.0], [69.9, 5411.0], [70.0, 5412.0], [70.1, 5412.0], [70.2, 5417.0], [70.3, 5424.0], [70.4, 5427.0], [70.5, 5434.0], [70.6, 5434.0], [70.7, 5435.0], [70.8, 5444.0], [70.9, 5447.0], [71.0, 5449.0], [71.1, 5449.0], [71.2, 5449.0], [71.3, 5457.0], [71.4, 5462.0], [71.5, 5463.0], [71.6, 5463.0], [71.7, 5464.0], [71.8, 5466.0], [71.9, 5468.0], [72.0, 5470.0], [72.1, 5470.0], [72.2, 5472.0], [72.3, 5485.0], [72.4, 5491.0], [72.5, 5528.0], [72.6, 5528.0], [72.7, 5550.0], [72.8, 5573.0], [72.9, 5576.0], [73.0, 5583.0], [73.1, 5583.0], [73.2, 5585.0], [73.3, 5593.0], [73.4, 5596.0], [73.5, 5596.0], [73.6, 5596.0], [73.7, 5611.0], [73.8, 5615.0], [73.9, 5615.0], [74.0, 5615.0], [74.1, 5615.0], [74.2, 5617.0], [74.3, 5618.0], [74.4, 5629.0], [74.5, 5653.0], [74.6, 5653.0], [74.7, 5655.0], [74.8, 5656.0], [74.9, 5665.0], [75.0, 5669.0], [75.1, 5669.0], [75.2, 5676.0], [75.3, 5677.0], [75.4, 5680.0], [75.5, 5700.0], [75.6, 5700.0], [75.7, 5704.0], [75.8, 5708.0], [75.9, 5709.0], [76.0, 5717.0], [76.1, 5717.0], [76.2, 5723.0], [76.3, 5724.0], [76.4, 5734.0], [76.5, 5739.0], [76.6, 5739.0], [76.7, 5740.0], [76.8, 5741.0], [76.9, 5742.0], [77.0, 5743.0], [77.1, 5743.0], [77.2, 5745.0], [77.3, 5747.0], [77.4, 5749.0], [77.5, 5752.0], [77.6, 5752.0], [77.7, 5758.0], [77.8, 5758.0], [77.9, 5759.0], [78.0, 5761.0], [78.1, 5761.0], [78.2, 5763.0], [78.3, 5764.0], [78.4, 5768.0], [78.5, 5769.0], [78.6, 5769.0], [78.7, 5772.0], [78.8, 5777.0], [78.9, 5779.0], [79.0, 5819.0], [79.1, 5819.0], [79.2, 5836.0], [79.3, 5851.0], [79.4, 5860.0], [79.5, 5860.0], [79.6, 5860.0], [79.7, 5871.0], [79.8, 5873.0], [79.9, 5875.0], [80.0, 5880.0], [80.1, 5880.0], [80.2, 5881.0], [80.3, 5883.0], [80.4, 5903.0], [80.5, 5917.0], [80.6, 5917.0], [80.7, 5932.0], [80.8, 5933.0], [80.9, 5937.0], [81.0, 5953.0], [81.1, 5953.0], [81.2, 5973.0], [81.3, 5978.0], [81.4, 5980.0], [81.5, 5987.0], [81.6, 5987.0], [81.7, 5987.0], [81.8, 5990.0], [81.9, 5999.0], [82.0, 6008.0], [82.1, 6008.0], [82.2, 6008.0], [82.3, 6011.0], [82.4, 6023.0], [82.5, 6029.0], [82.6, 6029.0], [82.7, 6042.0], [82.8, 6072.0], [82.9, 6074.0], [83.0, 6083.0], [83.1, 6083.0], [83.2, 6088.0], [83.3, 6096.0], [83.4, 6101.0], [83.5, 6119.0], [83.6, 6119.0], [83.7, 6144.0], [83.8, 6150.0], [83.9, 6183.0], [84.0, 6240.0], [84.1, 6240.0], [84.2, 6280.0], [84.3, 6286.0], [84.4, 6304.0], [84.5, 6339.0], [84.6, 6339.0], [84.7, 6370.0], [84.8, 6395.0], [84.9, 6444.0], [85.0, 6496.0], [85.1, 6496.0], [85.2, 6498.0], [85.3, 6545.0], [85.4, 6570.0], [85.5, 6581.0], [85.6, 6581.0], [85.7, 6667.0], [85.8, 6781.0], [85.9, 6843.0], [86.0, 6924.0], [86.1, 6924.0], [86.2, 6936.0], [86.3, 6967.0], [86.4, 7004.0], [86.5, 7052.0], [86.6, 7052.0], [86.7, 7107.0], [86.8, 7190.0], [86.9, 7217.0], [87.0, 7507.0], [87.1, 7507.0], [87.2, 7514.0], [87.3, 7935.0], [87.4, 7984.0], [87.5, 8244.0], [87.6, 8244.0], [87.7, 8284.0], [87.8, 8403.0], [87.9, 10047.0], [88.0, 10092.0], [88.1, 10092.0], [88.2, 10126.0], [88.3, 10132.0], [88.4, 10132.0], [88.5, 10160.0], [88.6, 10160.0], [88.7, 10203.0], [88.8, 10209.0], [88.9, 10259.0], [89.0, 10272.0], [89.1, 10272.0], [89.2, 10278.0], [89.3, 10282.0], [89.4, 10286.0], [89.5, 10287.0], [89.6, 10287.0], [89.7, 10287.0], [89.8, 10288.0], [89.9, 10322.0], [90.0, 10344.0], [90.1, 10344.0], [90.2, 10344.0], [90.3, 10357.0], [90.4, 10401.0], [90.5, 10416.0], [90.6, 10416.0], [90.7, 10419.0], [90.8, 10431.0], [90.9, 10432.0], [91.0, 10455.0], [91.1, 10455.0], [91.2, 10461.0], [91.3, 10475.0], [91.4, 10475.0], [91.5, 10491.0], [91.6, 10491.0], [91.7, 10498.0], [91.8, 10501.0], [91.9, 10525.0], [92.0, 10529.0], [92.1, 10529.0], [92.2, 10545.0], [92.3, 10613.0], [92.4, 10616.0], [92.5, 10620.0], [92.6, 10620.0], [92.7, 10629.0], [92.8, 10635.0], [92.9, 10641.0], [93.0, 10694.0], [93.1, 10694.0], [93.2, 10695.0], [93.3, 10725.0], [93.4, 10780.0], [93.5, 10835.0], [93.6, 10835.0], [93.7, 10859.0], [93.8, 10860.0], [93.9, 10890.0], [94.0, 10944.0], [94.1, 10944.0], [94.2, 10973.0], [94.3, 10983.0], [94.4, 10994.0], [94.5, 11069.0], [94.6, 11069.0], [94.7, 11146.0], [94.8, 11307.0], [94.9, 11345.0], [95.0, 11364.0], [95.1, 11364.0], [95.2, 11386.0], [95.3, 11416.0], [95.4, 11480.0], [95.5, 11587.0], [95.6, 11587.0], [95.7, 11647.0], [95.8, 11747.0], [95.9, 11773.0], [96.0, 11827.0], [96.1, 11827.0], [96.2, 11880.0], [96.3, 11881.0], [96.4, 12053.0], [96.5, 12065.0], [96.6, 12065.0], [96.7, 12325.0], [96.8, 12429.0], [96.9, 12479.0], [97.0, 12492.0], [97.1, 12492.0], [97.2, 12503.0], [97.3, 12529.0], [97.4, 12543.0], [97.5, 12555.0], [97.6, 12555.0], [97.7, 12567.0], [97.8, 12590.0], [97.9, 12593.0], [98.0, 12615.0], [98.1, 12615.0], [98.2, 12648.0], [98.3, 12684.0], [98.4, 12687.0], [98.5, 12701.0], [98.6, 12701.0], [98.7, 12722.0], [98.8, 12811.0], [98.9, 12853.0], [99.0, 12860.0], [99.1, 12860.0], [99.2, 12861.0], [99.3, 12896.0], [99.4, 12906.0], [99.5, 13009.0], [99.6, 13009.0], [99.7, 13038.0], [99.8, 13043.0], [99.9, 13564.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 13.0], [0.1, 13.0], [0.2, 13.0], [0.3, 14.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 15.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 16.0], [1.4, 16.0], [1.5, 16.0], [1.6, 16.0], [1.7, 16.0], [1.8, 16.0], [1.9, 16.0], [2.0, 16.0], [2.1, 16.0], [2.2, 16.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 16.0], [3.2, 17.0], [3.3, 17.0], [3.4, 17.0], [3.5, 17.0], [3.6, 17.0], [3.7, 17.0], [3.8, 17.0], [3.9, 17.0], [4.0, 17.0], [4.1, 17.0], [4.2, 17.0], [4.3, 17.0], [4.4, 17.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 17.0], [5.1, 17.0], [5.2, 17.0], [5.3, 17.0], [5.4, 17.0], [5.5, 17.0], [5.6, 17.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 18.0], [6.1, 18.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 18.0], [7.7, 18.0], [7.8, 18.0], [7.9, 19.0], [8.0, 19.0], [8.1, 19.0], [8.2, 19.0], [8.3, 19.0], [8.4, 19.0], [8.5, 19.0], [8.6, 19.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 19.0], [9.1, 19.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 19.0], [9.6, 19.0], [9.7, 19.0], [9.8, 19.0], [9.9, 19.0], [10.0, 19.0], [10.1, 19.0], [10.2, 20.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 21.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 22.0], [14.5, 22.0], [14.6, 22.0], [14.7, 22.0], [14.8, 22.0], [14.9, 22.0], [15.0, 22.0], [15.1, 22.0], [15.2, 22.0], [15.3, 22.0], [15.4, 22.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 23.0], [16.1, 23.0], [16.2, 23.0], [16.3, 23.0], [16.4, 23.0], [16.5, 23.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 23.0], [17.0, 23.0], [17.1, 23.0], [17.2, 23.0], [17.3, 23.0], [17.4, 23.0], [17.5, 23.0], [17.6, 23.0], [17.7, 23.0], [17.8, 23.0], [17.9, 23.0], [18.0, 23.0], [18.1, 23.0], [18.2, 24.0], [18.3, 24.0], [18.4, 24.0], [18.5, 24.0], [18.6, 24.0], [18.7, 24.0], [18.8, 24.0], [18.9, 24.0], [19.0, 24.0], [19.1, 24.0], [19.2, 24.0], [19.3, 24.0], [19.4, 24.0], [19.5, 24.0], [19.6, 24.0], [19.7, 24.0], [19.8, 24.0], [19.9, 24.0], [20.0, 24.0], [20.1, 24.0], [20.2, 24.0], [20.3, 24.0], [20.4, 24.0], [20.5, 25.0], [20.6, 25.0], [20.7, 25.0], [20.8, 25.0], [20.9, 25.0], [21.0, 25.0], [21.1, 25.0], [21.2, 25.0], [21.3, 25.0], [21.4, 25.0], [21.5, 25.0], [21.6, 25.0], [21.7, 25.0], [21.8, 25.0], [21.9, 25.0], [22.0, 26.0], [22.1, 26.0], [22.2, 26.0], [22.3, 26.0], [22.4, 26.0], [22.5, 26.0], [22.6, 26.0], [22.7, 26.0], [22.8, 26.0], [22.9, 26.0], [23.0, 26.0], [23.1, 26.0], [23.2, 26.0], [23.3, 26.0], [23.4, 26.0], [23.5, 26.0], [23.6, 26.0], [23.7, 27.0], [23.8, 27.0], [23.9, 27.0], [24.0, 27.0], [24.1, 27.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 27.0], [24.6, 27.0], [24.7, 27.0], [24.8, 27.0], [24.9, 27.0], [25.0, 27.0], [25.1, 27.0], [25.2, 27.0], [25.3, 28.0], [25.4, 28.0], [25.5, 28.0], [25.6, 28.0], [25.7, 28.0], [25.8, 28.0], [25.9, 28.0], [26.0, 28.0], [26.1, 28.0], [26.2, 28.0], [26.3, 28.0], [26.4, 28.0], [26.5, 28.0], [26.6, 28.0], [26.7, 28.0], [26.8, 28.0], [26.9, 28.0], [27.0, 28.0], [27.1, 28.0], [27.2, 29.0], [27.3, 29.0], [27.4, 29.0], [27.5, 29.0], [27.6, 29.0], [27.7, 29.0], [27.8, 29.0], [27.9, 29.0], [28.0, 29.0], [28.1, 29.0], [28.2, 29.0], [28.3, 29.0], [28.4, 29.0], [28.5, 29.0], [28.6, 29.0], [28.7, 29.0], [28.8, 29.0], [28.9, 29.0], [29.0, 30.0], [29.1, 30.0], [29.2, 30.0], [29.3, 30.0], [29.4, 30.0], [29.5, 30.0], [29.6, 30.0], [29.7, 30.0], [29.8, 30.0], [29.9, 30.0], [30.0, 30.0], [30.1, 30.0], [30.2, 30.0], [30.3, 30.0], [30.4, 30.0], [30.5, 30.0], [30.6, 30.0], [30.7, 30.0], [30.8, 30.0], [30.9, 30.0], [31.0, 31.0], [31.1, 31.0], [31.2, 31.0], [31.3, 31.0], [31.4, 31.0], [31.5, 31.0], [31.6, 31.0], [31.7, 31.0], [31.8, 31.0], [31.9, 31.0], [32.0, 31.0], [32.1, 31.0], [32.2, 31.0], [32.3, 32.0], [32.4, 32.0], [32.5, 32.0], [32.6, 32.0], [32.7, 32.0], [32.8, 32.0], [32.9, 32.0], [33.0, 32.0], [33.1, 32.0], [33.2, 32.0], [33.3, 32.0], [33.4, 32.0], [33.5, 32.0], [33.6, 32.0], [33.7, 32.0], [33.8, 32.0], [33.9, 32.0], [34.0, 32.0], [34.1, 32.0], [34.2, 33.0], [34.3, 33.0], [34.4, 33.0], [34.5, 33.0], [34.6, 33.0], [34.7, 33.0], [34.8, 33.0], [34.9, 33.0], [35.0, 33.0], [35.1, 33.0], [35.2, 33.0], [35.3, 33.0], [35.4, 33.0], [35.5, 33.0], [35.6, 33.0], [35.7, 33.0], [35.8, 34.0], [35.9, 34.0], [36.0, 34.0], [36.1, 34.0], [36.2, 34.0], [36.3, 34.0], [36.4, 34.0], [36.5, 34.0], [36.6, 34.0], [36.7, 34.0], [36.8, 34.0], [36.9, 34.0], [37.0, 35.0], [37.1, 35.0], [37.2, 35.0], [37.3, 35.0], [37.4, 35.0], [37.5, 35.0], [37.6, 35.0], [37.7, 35.0], [37.8, 35.0], [37.9, 35.0], [38.0, 35.0], [38.1, 35.0], [38.2, 35.0], [38.3, 35.0], [38.4, 35.0], [38.5, 35.0], [38.6, 35.0], [38.7, 35.0], [38.8, 36.0], [38.9, 36.0], [39.0, 36.0], [39.1, 36.0], [39.2, 36.0], [39.3, 36.0], [39.4, 36.0], [39.5, 36.0], [39.6, 36.0], [39.7, 36.0], [39.8, 36.0], [39.9, 36.0], [40.0, 36.0], [40.1, 36.0], [40.2, 36.0], [40.3, 36.0], [40.4, 36.0], [40.5, 36.0], [40.6, 36.0], [40.7, 36.0], [40.8, 37.0], [40.9, 37.0], [41.0, 37.0], [41.1, 37.0], [41.2, 37.0], [41.3, 37.0], [41.4, 37.0], [41.5, 37.0], [41.6, 37.0], [41.7, 38.0], [41.8, 38.0], [41.9, 38.0], [42.0, 38.0], [42.1, 38.0], [42.2, 38.0], [42.3, 38.0], [42.4, 38.0], [42.5, 38.0], [42.6, 38.0], [42.7, 38.0], [42.8, 38.0], [42.9, 38.0], [43.0, 38.0], [43.1, 38.0], [43.2, 38.0], [43.3, 38.0], [43.4, 39.0], [43.5, 39.0], [43.6, 39.0], [43.7, 39.0], [43.8, 39.0], [43.9, 39.0], [44.0, 39.0], [44.1, 39.0], [44.2, 39.0], [44.3, 40.0], [44.4, 40.0], [44.5, 40.0], [44.6, 40.0], [44.7, 40.0], [44.8, 40.0], [44.9, 40.0], [45.0, 40.0], [45.1, 40.0], [45.2, 40.0], [45.3, 40.0], [45.4, 40.0], [45.5, 40.0], [45.6, 40.0], [45.7, 40.0], [45.8, 41.0], [45.9, 41.0], [46.0, 41.0], [46.1, 41.0], [46.2, 41.0], [46.3, 41.0], [46.4, 41.0], [46.5, 41.0], [46.6, 41.0], [46.7, 42.0], [46.8, 42.0], [46.9, 42.0], [47.0, 42.0], [47.1, 42.0], [47.2, 42.0], [47.3, 42.0], [47.4, 42.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 44.0], [48.6, 44.0], [48.7, 44.0], [48.8, 44.0], [48.9, 44.0], [49.0, 44.0], [49.1, 44.0], [49.2, 44.0], [49.3, 44.0], [49.4, 44.0], [49.5, 44.0], [49.6, 44.0], [49.7, 44.0], [49.8, 44.0], [49.9, 44.0], [50.0, 45.0], [50.1, 45.0], [50.2, 45.0], [50.3, 45.0], [50.4, 45.0], [50.5, 45.0], [50.6, 45.0], [50.7, 45.0], [50.8, 45.0], [50.9, 46.0], [51.0, 46.0], [51.1, 46.0], [51.2, 46.0], [51.3, 46.0], [51.4, 46.0], [51.5, 47.0], [51.6, 47.0], [51.7, 47.0], [51.8, 47.0], [51.9, 47.0], [52.0, 47.0], [52.1, 47.0], [52.2, 47.0], [52.3, 47.0], [52.4, 48.0], [52.5, 48.0], [52.6, 48.0], [52.7, 48.0], [52.8, 48.0], [52.9, 48.0], [53.0, 48.0], [53.1, 48.0], [53.2, 49.0], [53.3, 49.0], [53.4, 49.0], [53.5, 49.0], [53.6, 49.0], [53.7, 50.0], [53.8, 50.0], [53.9, 50.0], [54.0, 50.0], [54.1, 50.0], [54.2, 50.0], [54.3, 50.0], [54.4, 50.0], [54.5, 51.0], [54.6, 51.0], [54.7, 51.0], [54.8, 51.0], [54.9, 51.0], [55.0, 51.0], [55.1, 51.0], [55.2, 51.0], [55.3, 51.0], [55.4, 51.0], [55.5, 51.0], [55.6, 51.0], [55.7, 52.0], [55.8, 52.0], [55.9, 52.0], [56.0, 52.0], [56.1, 52.0], [56.2, 52.0], [56.3, 52.0], [56.4, 52.0], [56.5, 53.0], [56.6, 53.0], [56.7, 53.0], [56.8, 53.0], [56.9, 53.0], [57.0, 53.0], [57.1, 53.0], [57.2, 53.0], [57.3, 53.0], [57.4, 53.0], [57.5, 53.0], [57.6, 53.0], [57.7, 53.0], [57.8, 53.0], [57.9, 54.0], [58.0, 54.0], [58.1, 54.0], [58.2, 54.0], [58.3, 54.0], [58.4, 54.0], [58.5, 54.0], [58.6, 54.0], [58.7, 54.0], [58.8, 54.0], [58.9, 54.0], [59.0, 55.0], [59.1, 55.0], [59.2, 55.0], [59.3, 55.0], [59.4, 55.0], [59.5, 55.0], [59.6, 55.0], [59.7, 55.0], [59.8, 55.0], [59.9, 55.0], [60.0, 56.0], [60.1, 56.0], [60.2, 56.0], [60.3, 56.0], [60.4, 56.0], [60.5, 56.0], [60.6, 56.0], [60.7, 56.0], [60.8, 56.0], [60.9, 57.0], [61.0, 57.0], [61.1, 57.0], [61.2, 57.0], [61.3, 57.0], [61.4, 57.0], [61.5, 57.0], [61.6, 57.0], [61.7, 57.0], [61.8, 57.0], [61.9, 58.0], [62.0, 58.0], [62.1, 58.0], [62.2, 58.0], [62.3, 58.0], [62.4, 58.0], [62.5, 58.0], [62.6, 58.0], [62.7, 59.0], [62.8, 59.0], [62.9, 59.0], [63.0, 59.0], [63.1, 59.0], [63.2, 59.0], [63.3, 59.0], [63.4, 59.0], [63.5, 59.0], [63.6, 59.0], [63.7, 59.0], [63.8, 59.0], [63.9, 59.0], [64.0, 60.0], [64.1, 60.0], [64.2, 60.0], [64.3, 60.0], [64.4, 60.0], [64.5, 60.0], [64.6, 60.0], [64.7, 61.0], [64.8, 61.0], [64.9, 61.0], [65.0, 61.0], [65.1, 61.0], [65.2, 61.0], [65.3, 61.0], [65.4, 61.0], [65.5, 62.0], [65.6, 62.0], [65.7, 62.0], [65.8, 62.0], [65.9, 62.0], [66.0, 62.0], [66.1, 62.0], [66.2, 62.0], [66.3, 62.0], [66.4, 63.0], [66.5, 63.0], [66.6, 63.0], [66.7, 63.0], [66.8, 63.0], [66.9, 63.0], [67.0, 63.0], [67.1, 63.0], [67.2, 64.0], [67.3, 64.0], [67.4, 64.0], [67.5, 64.0], [67.6, 64.0], [67.7, 64.0], [67.8, 64.0], [67.9, 64.0], [68.0, 64.0], [68.1, 64.0], [68.2, 64.0], [68.3, 65.0], [68.4, 65.0], [68.5, 65.0], [68.6, 65.0], [68.7, 66.0], [68.8, 66.0], [68.9, 66.0], [69.0, 66.0], [69.1, 66.0], [69.2, 66.0], [69.3, 67.0], [69.4, 67.0], [69.5, 67.0], [69.6, 67.0], [69.7, 68.0], [69.8, 68.0], [69.9, 68.0], [70.0, 68.0], [70.1, 68.0], [70.2, 68.0], [70.3, 68.0], [70.4, 69.0], [70.5, 69.0], [70.6, 69.0], [70.7, 69.0], [70.8, 69.0], [70.9, 69.0], [71.0, 69.0], [71.1, 69.0], [71.2, 70.0], [71.3, 70.0], [71.4, 70.0], [71.5, 71.0], [71.6, 71.0], [71.7, 71.0], [71.8, 72.0], [71.9, 72.0], [72.0, 72.0], [72.1, 72.0], [72.2, 72.0], [72.3, 72.0], [72.4, 72.0], [72.5, 73.0], [72.6, 73.0], [72.7, 73.0], [72.8, 73.0], [72.9, 73.0], [73.0, 74.0], [73.1, 74.0], [73.2, 74.0], [73.3, 77.0], [73.4, 78.0], [73.5, 78.0], [73.6, 78.0], [73.7, 78.0], [73.8, 78.0], [73.9, 78.0], [74.0, 78.0], [74.1, 78.0], [74.2, 78.0], [74.3, 78.0], [74.4, 79.0], [74.5, 79.0], [74.6, 79.0], [74.7, 79.0], [74.8, 80.0], [74.9, 80.0], [75.0, 80.0], [75.1, 80.0], [75.2, 80.0], [75.3, 80.0], [75.4, 80.0], [75.5, 80.0], [75.6, 80.0], [75.7, 81.0], [75.8, 81.0], [75.9, 81.0], [76.0, 82.0], [76.1, 82.0], [76.2, 82.0], [76.3, 82.0], [76.4, 82.0], [76.5, 82.0], [76.6, 82.0], [76.7, 82.0], [76.8, 83.0], [76.9, 83.0], [77.0, 84.0], [77.1, 84.0], [77.2, 85.0], [77.3, 85.0], [77.4, 86.0], [77.5, 86.0], [77.6, 86.0], [77.7, 86.0], [77.8, 86.0], [77.9, 87.0], [78.0, 87.0], [78.1, 87.0], [78.2, 88.0], [78.3, 89.0], [78.4, 89.0], [78.5, 89.0], [78.6, 89.0], [78.7, 89.0], [78.8, 89.0], [78.9, 89.0], [79.0, 89.0], [79.1, 89.0], [79.2, 90.0], [79.3, 90.0], [79.4, 90.0], [79.5, 90.0], [79.6, 90.0], [79.7, 90.0], [79.8, 91.0], [79.9, 91.0], [80.0, 91.0], [80.1, 91.0], [80.2, 91.0], [80.3, 91.0], [80.4, 91.0], [80.5, 91.0], [80.6, 91.0], [80.7, 91.0], [80.8, 92.0], [80.9, 92.0], [81.0, 92.0], [81.1, 92.0], [81.2, 93.0], [81.3, 93.0], [81.4, 93.0], [81.5, 94.0], [81.6, 94.0], [81.7, 94.0], [81.8, 94.0], [81.9, 95.0], [82.0, 95.0], [82.1, 95.0], [82.2, 95.0], [82.3, 95.0], [82.4, 96.0], [82.5, 96.0], [82.6, 96.0], [82.7, 96.0], [82.8, 96.0], [82.9, 96.0], [83.0, 96.0], [83.1, 96.0], [83.2, 97.0], [83.3, 97.0], [83.4, 97.0], [83.5, 97.0], [83.6, 97.0], [83.7, 97.0], [83.8, 98.0], [83.9, 99.0], [84.0, 99.0], [84.1, 99.0], [84.2, 100.0], [84.3, 100.0], [84.4, 100.0], [84.5, 101.0], [84.6, 101.0], [84.7, 101.0], [84.8, 101.0], [84.9, 102.0], [85.0, 103.0], [85.1, 103.0], [85.2, 103.0], [85.3, 107.0], [85.4, 108.0], [85.5, 109.0], [85.6, 109.0], [85.7, 111.0], [85.8, 111.0], [85.9, 112.0], [86.0, 113.0], [86.1, 113.0], [86.2, 113.0], [86.3, 114.0], [86.4, 114.0], [86.5, 115.0], [86.6, 115.0], [86.7, 116.0], [86.8, 122.0], [86.9, 123.0], [87.0, 123.0], [87.1, 123.0], [87.2, 125.0], [87.3, 127.0], [87.4, 127.0], [87.5, 128.0], [87.6, 128.0], [87.7, 129.0], [87.8, 129.0], [87.9, 129.0], [88.0, 130.0], [88.1, 130.0], [88.2, 130.0], [88.3, 130.0], [88.4, 131.0], [88.5, 131.0], [88.6, 131.0], [88.7, 131.0], [88.8, 131.0], [88.9, 131.0], [89.0, 132.0], [89.1, 132.0], [89.2, 132.0], [89.3, 133.0], [89.4, 133.0], [89.5, 134.0], [89.6, 134.0], [89.7, 135.0], [89.8, 135.0], [89.9, 136.0], [90.0, 137.0], [90.1, 137.0], [90.2, 138.0], [90.3, 138.0], [90.4, 138.0], [90.5, 139.0], [90.6, 139.0], [90.7, 139.0], [90.8, 140.0], [90.9, 140.0], [91.0, 141.0], [91.1, 141.0], [91.2, 141.0], [91.3, 142.0], [91.4, 144.0], [91.5, 144.0], [91.6, 144.0], [91.7, 146.0], [91.8, 152.0], [91.9, 162.0], [92.0, 166.0], [92.1, 166.0], [92.2, 170.0], [92.3, 172.0], [92.4, 174.0], [92.5, 178.0], [92.6, 178.0], [92.7, 179.0], [92.8, 180.0], [92.9, 181.0], [93.0, 184.0], [93.1, 184.0], [93.2, 188.0], [93.3, 188.0], [93.4, 194.0], [93.5, 196.0], [93.6, 196.0], [93.7, 197.0], [93.8, 198.0], [93.9, 198.0], [94.0, 200.0], [94.1, 200.0], [94.2, 204.0], [94.3, 204.0], [94.4, 204.0], [94.5, 205.0], [94.6, 205.0], [94.7, 206.0], [94.8, 207.0], [94.9, 208.0], [95.0, 209.0], [95.1, 209.0], [95.2, 210.0], [95.3, 211.0], [95.4, 213.0], [95.5, 215.0], [95.6, 215.0], [95.7, 216.0], [95.8, 217.0], [95.9, 218.0], [96.0, 219.0], [96.1, 219.0], [96.2, 225.0], [96.3, 227.0], [96.4, 228.0], [96.5, 229.0], [96.6, 229.0], [96.7, 237.0], [96.8, 239.0], [96.9, 252.0], [97.0, 252.0], [97.1, 252.0], [97.2, 260.0], [97.3, 271.0], [97.4, 274.0], [97.5, 279.0], [97.6, 279.0], [97.7, 300.0], [97.8, 314.0], [97.9, 315.0], [98.0, 338.0], [98.1, 338.0], [98.2, 342.0], [98.3, 344.0], [98.4, 347.0], [98.5, 363.0], [98.6, 363.0], [98.7, 366.0], [98.8, 375.0], [98.9, 377.0], [99.0, 379.0], [99.1, 379.0], [99.2, 506.0], [99.3, 528.0], [99.4, 555.0], [99.5, 573.0], [99.6, 573.0], [99.7, 575.0], [99.8, 581.0], [99.9, 631.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 673.0, "series": [{"data": [[0.0, 14.0], [100.0, 56.0], [200.0, 29.0], [300.0, 16.0], [400.0, 20.0], [500.0, 32.0], [600.0, 9.0], [700.0, 16.0], [800.0, 6.0], [900.0, 25.0], [1000.0, 18.0], [1100.0, 9.0], [1200.0, 3.0], [1300.0, 4.0], [1400.0, 5.0], [1500.0, 1.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 5.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 3.0], [2300.0, 2.0], [2400.0, 7.0], [2500.0, 6.0], [2600.0, 4.0], [2800.0, 4.0], [2700.0, 8.0], [2900.0, 5.0], [3000.0, 2.0], [3100.0, 6.0], [3200.0, 12.0], [3300.0, 5.0], [3400.0, 10.0], [3500.0, 5.0], [3700.0, 6.0], [3600.0, 4.0], [3800.0, 6.0], [3900.0, 6.0], [4000.0, 8.0], [4100.0, 8.0], [4200.0, 6.0], [4300.0, 5.0], [4400.0, 18.0], [4500.0, 20.0], [4600.0, 19.0], [4700.0, 21.0], [4800.0, 9.0], [5000.0, 9.0], [5100.0, 12.0], [4900.0, 7.0], [5200.0, 18.0], [5300.0, 15.0], [5400.0, 21.0], [5500.0, 9.0], [5600.0, 15.0], [5700.0, 28.0], [5800.0, 11.0], [5900.0, 13.0], [6000.0, 11.0], [6100.0, 5.0], [6200.0, 3.0], [6300.0, 4.0], [6400.0, 3.0], [6500.0, 3.0], [6600.0, 1.0], [6900.0, 3.0], [6800.0, 1.0], [6700.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7200.0, 1.0], [7500.0, 2.0], [7900.0, 2.0], [8200.0, 2.0], [8400.0, 1.0], [10100.0, 4.0], [10000.0, 2.0], [10200.0, 10.0], [10500.0, 4.0], [10300.0, 4.0], [10400.0, 11.0], [10600.0, 8.0], [10700.0, 2.0], [11000.0, 1.0], [10800.0, 4.0], [10900.0, 4.0], [11100.0, 1.0], [11300.0, 4.0], [11700.0, 2.0], [11500.0, 1.0], [11600.0, 1.0], [11400.0, 2.0], [11800.0, 3.0], [12000.0, 2.0], [12400.0, 3.0], [12500.0, 7.0], [12300.0, 1.0], [12600.0, 4.0], [12700.0, 2.0], [12800.0, 5.0], [12900.0, 1.0], [13000.0, 3.0], [13500.0, 1.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 673.0], [300.0, 12.0], [600.0, 1.0], [100.0, 79.0], [200.0, 29.0], [500.0, 6.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 928.0, "series": [{"data": [[0.0, 928.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 134.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 538.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 214.02750000000006, "minX": 1.71190656E12, "maxY": 214.02750000000006, "series": [{"data": [[1.71190656E12, 214.02750000000006]], "isOverall": false, "label": "MyfirstTestPlanThreadCount800", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71190656E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 13023.5, "series": [{"data": [[9.0, 532.5], [12.0, 561.5], [13.0, 649.3333333333334], [14.0, 587.0], [15.0, 558.0], [16.0, 596.6666666666666], [17.0, 510.8888888888889], [18.0, 210.0], [19.0, 211.5], [20.0, 198.0], [24.0, 3121.6249999999995], [26.0, 6781.0], [27.0, 811.2222222222222], [28.0, 3345.2], [29.0, 4997.5], [30.0, 4759.0], [41.0, 996.3333333333334], [40.0, 953.1666666666666], [43.0, 990.7142857142858], [42.0, 967.0], [45.0, 5518.333333333333], [44.0, 4665.0], [47.0, 4409.666666666667], [49.0, 2505.6666666666665], [48.0, 4463.5], [51.0, 939.0], [50.0, 976.0], [52.0, 3906.3333333333335], [53.0, 4523.000000000001], [55.0, 4225.8], [54.0, 932.1666666666667], [56.0, 9321.625], [61.0, 13023.5], [60.0, 12429.0], [67.0, 6101.0], [64.0, 4757.333333333334], [65.0, 572.3333333333334], [70.0, 10983.0], [69.0, 12896.0], [68.0, 12853.0], [71.0, 789.0], [73.0, 786.0], [72.0, 801.0], [76.0, 772.0], [82.0, 3395.75], [81.0, 1652.7368421052631], [80.0, 12503.0], [83.0, 636.1666666666667], [87.0, 10620.0], [86.0, 10461.0], [85.0, 8775.499999999998], [84.0, 3941.333333333333], [90.0, 12053.0], [89.0, 600.5], [88.0, 597.0], [95.0, 10961.0], [93.0, 11518.375], [100.0, 12684.0], [107.0, 10092.0], [104.0, 11766.5], [111.0, 11804.5], [110.0, 11647.0], [109.0, 10491.0], [118.0, 10416.0], [123.0, 11470.5], [122.0, 12568.0], [127.0, 11827.0], [126.0, 10451.5], [125.0, 11844.5], [124.0, 11522.5], [132.0, 11266.5], [131.0, 10896.75], [130.0, 11052.0], [143.0, 4266.333333333333], [140.0, 11345.0], [138.0, 6085.5], [137.0, 6084.0], [136.0, 11307.0], [151.0, 8419.0], [150.0, 4934.5], [149.0, 5828.666666666666], [147.0, 5278.0], [146.0, 5601.0], [144.0, 6286.0], [156.0, 4551.5], [155.0, 5962.5], [158.0, 5819.0], [157.0, 5792.5], [154.0, 5908.333333333333], [153.0, 5953.0], [163.0, 5932.0], [161.0, 4828.75], [167.0, 5708.5], [166.0, 5735.0], [165.0, 5739.0], [175.0, 5665.5], [170.0, 5680.0], [183.0, 5881.0], [182.0, 4257.333333333333], [181.0, 5873.0], [180.0, 4245.5], [179.0, 5557.5], [176.0, 5613.375], [186.0, 4748.333333333333], [185.0, 5860.0], [184.0, 4806.0], [191.0, 5460.555555555556], [188.0, 5488.0], [193.0, 5432.0], [223.0, 5255.448275862069], [222.0, 5322.0], [221.0, 5344.0], [220.0, 5351.0], [231.0, 5677.0], [230.0, 4592.5], [229.0, 4435.0], [228.0, 4900.111111111111], [227.0, 5152.444444444445], [236.0, 4070.2], [235.0, 4600.777777777777], [233.0, 4865.437499999999], [232.0, 4745.571428571428], [234.0, 4970.0], [246.0, 4860.0], [242.0, 4076.6666666666665], [241.0, 3246.0], [240.0, 3094.5], [243.0, 4779.2], [254.0, 3322.0], [252.0, 4758.0], [250.0, 4354.5], [249.0, 4446.5], [271.0, 3982.5], [269.0, 4599.310344827587], [266.0, 2982.0], [264.0, 3485.75], [263.0, 4569.0], [256.0, 4590.0], [270.0, 4569.5], [268.0, 4684.0], [267.0, 4714.0], [285.0, 3762.0], [284.0, 2968.5], [282.0, 2570.0], [280.0, 3216.0], [279.0, 4070.8], [278.0, 1747.0], [277.0, 4493.5], [275.0, 3063.5], [273.0, 2290.0], [287.0, 123.0], [286.0, 125.33333333333333], [294.0, 3149.714285714286], [293.0, 2447.0], [289.0, 3363.3333333333335], [288.0, 2436.0], [301.0, 109.0], [298.0, 1403.0], [296.0, 127.0], [292.0, 6148.142857142857], [317.0, 118.0], [315.0, 1834.5], [310.0, 3176.0], [309.0, 1078.5], [305.0, 122.0], [304.0, 2474.75], [333.0, 2034.3333333333333], [332.0, 105.0], [330.0, 3708.0], [328.0, 152.0], [324.0, 1953.0], [322.0, 3373.0], [321.0, 83.33333333333333], [347.0, 1262.0], [345.0, 1693.6666666666665], [342.0, 1800.5], [340.0, 1790.7499999999998], [336.0, 957.6666666666667], [367.0, 192.33333333333334], [360.0, 2631.5], [359.0, 165.5], [357.0, 181.0], [383.0, 6395.0], [382.0, 3910.0], [381.0, 2093.857142857143], [374.0, 1074.8], [369.0, 2134.833333333333], [387.0, 1361.4], [393.0, 4462.2], [392.0, 5790.5], [389.0, 4928.142857142857], [385.0, 6329.0], [384.0, 6130.4], [398.0, 485.0], [395.0, 1023.6666666666666], [386.0, 148.0], [412.0, 1268.0], [411.0, 1333.0], [408.0, 1443.0], [407.0, 1495.5], [404.0, 516.0], [403.0, 131.0], [402.0, 1620.0], [430.0, 999.5], [429.0, 1057.6], [428.0, 1092.0], [427.0, 1104.0], [421.0, 1184.625], [420.0, 1219.0], [447.0, 246.5], [444.0, 245.0], [439.0, 829.0], [437.0, 320.0], [436.0, 326.0], [435.0, 896.0], [433.0, 919.0], [432.0, 374.0], [461.0, 367.0], [456.0, 1591.7], [455.0, 1050.3333333333335], [452.0, 504.5], [476.0, 4482.0], [479.0, 6029.0], [478.0, 4249.0], [477.0, 106.5], [472.0, 7536.4], [471.0, 3918.8], [469.0, 1681.0], [466.0, 512.0], [465.0, 357.0], [487.0, 7301.0], [481.0, 4621.166666666667], [480.0, 6843.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[217.1487500000002, 4119.057500000002]], "isOverall": false, "label": "ProductSearch-Aggregated", "isController": false}, {"data": [[2.0, 46.0], [3.0, 48.0], [4.0, 52.0], [5.0, 44.0], [6.0, 39.0], [7.0, 38.0], [8.0, 40.0], [9.0, 53.0], [10.0, 36.666666666666664], [11.0, 29.0], [12.0, 33.5], [13.0, 40.5], [14.0, 64.0], [15.0, 45.5], [16.0, 45.666666666666664], [17.0, 38.333333333333336], [18.0, 45.5], [19.0, 35.0], [20.0, 38.0], [21.0, 38.25], [22.0, 49.666666666666664], [23.0, 55.0], [24.0, 47.0], [25.0, 49.6], [26.0, 49.75], [27.0, 42.75], [28.0, 46.5], [29.0, 53.0], [30.0, 52.5], [31.0, 71.0], [32.0, 70.0], [33.0, 44.0], [35.0, 87.5], [34.0, 52.0], [37.0, 76.5], [36.0, 85.0], [38.0, 85.5], [39.0, 90.0], [40.0, 102.5], [41.0, 143.5], [42.0, 137.5], [43.0, 142.5], [45.0, 97.5], [44.0, 129.0], [46.0, 96.0], [47.0, 58.25], [48.0, 124.8], [49.0, 78.25], [50.0, 121.4], [51.0, 149.0], [53.0, 114.0], [52.0, 123.25], [55.0, 134.0], [54.0, 142.0], [57.0, 72.0], [56.0, 80.0], [59.0, 47.0], [58.0, 71.5], [61.0, 93.5], [60.0, 127.0], [63.0, 122.5], [62.0, 80.66666666666667], [67.0, 206.5], [66.0, 112.0], [65.0, 23.0], [64.0, 119.5], [69.0, 166.25], [68.0, 21.0], [71.0, 218.0], [75.0, 125.5], [74.0, 126.5], [72.0, 84.25], [73.0, 379.0], [79.0, 184.0], [78.0, 208.5], [77.0, 71.25], [76.0, 366.0], [82.0, 188.0], [81.0, 181.0], [80.0, 128.5], [83.0, 246.0], [87.0, 136.0], [86.0, 142.5], [85.0, 151.33333333333334], [84.0, 188.16666666666666], [91.0, 82.0], [90.0, 72.0], [88.0, 259.0], [89.0, 190.0], [95.0, 26.0], [94.0, 14.0], [93.0, 107.0], [92.0, 93.0], [99.0, 17.0], [98.0, 16.0], [97.0, 19.0], [96.0, 17.0], [103.0, 28.0], [102.0, 27.0], [101.0, 69.0], [100.0, 21.0], [107.0, 44.0], [106.0, 16.0], [105.0, 17.0], [104.0, 19.0], [111.0, 32.0], [110.0, 31.0], [109.0, 34.0], [108.0, 18.0], [115.0, 29.5], [113.0, 28.0], [119.0, 51.0], [118.0, 53.0], [117.0, 63.0], [116.0, 32.0], [123.0, 56.0], [122.0, 51.0], [121.0, 67.0], [120.0, 63.0], [127.0, 31.0], [126.0, 49.0], [125.0, 62.0], [124.0, 57.0], [135.0, 91.0], [134.0, 91.0], [133.0, 103.0], [132.0, 114.0], [131.0, 21.0], [130.0, 27.0], [129.0, 30.0], [128.0, 30.0], [142.0, 32.5], [140.0, 35.0], [139.0, 13.0], [138.0, 28.0], [137.0, 24.0], [136.0, 58.0], [151.0, 27.0], [150.0, 21.5], [149.0, 31.666666666666668], [148.0, 31.0], [146.0, 29.0], [145.0, 34.5], [144.0, 25.666666666666668], [159.0, 17.0], [158.0, 20.0], [157.0, 18.5], [156.0, 20.0], [155.0, 37.5], [154.0, 58.0], [153.0, 25.0], [152.0, 20.0], [167.0, 25.5], [166.0, 45.0], [165.0, 30.0], [164.0, 33.0], [162.0, 33.5], [160.0, 16.5], [163.0, 25.0], [161.0, 25.0], [175.0, 38.0], [174.0, 38.0], [173.0, 45.666666666666664], [172.0, 45.5], [171.0, 28.0], [170.0, 47.0], [169.0, 22.5], [168.0, 25.0], [183.0, 99.0], [182.0, 45.0], [181.0, 103.0], [180.0, 113.0], [179.0, 107.0], [177.0, 21.0], [176.0, 39.5], [178.0, 96.0], [191.0, 48.0], [190.0, 41.666666666666664], [189.0, 96.0], [188.0, 55.5], [187.0, 53.5], [186.0, 59.0], [185.0, 75.66666666666667], [184.0, 55.333333333333336], [199.0, 54.5], [198.0, 73.0], [197.0, 56.0], [196.0, 56.0], [195.0, 73.0], [194.0, 73.0], [193.0, 61.5], [192.0, 61.0], [207.0, 68.33333333333333], [206.0, 68.33333333333333], [204.0, 68.4], [202.0, 62.75], [201.0, 65.0], [203.0, 237.0], [205.0, 69.0], [200.0, 57.0], [215.0, 79.0], [214.0, 60.0], [213.0, 75.5], [212.0, 82.0], [211.0, 62.0], [210.0, 76.5], [209.0, 75.4], [223.0, 72.0], [222.0, 71.0], [221.0, 72.5], [220.0, 73.5], [219.0, 75.5], [218.0, 77.0], [217.0, 78.0], [216.0, 83.33333333333333], [231.0, 154.5], [230.0, 159.5], [229.0, 148.66666666666666], [228.0, 172.0], [227.0, 114.0], [225.0, 65.0], [224.0, 49.5], [226.0, 113.0], [239.0, 139.5], [237.0, 164.5], [236.0, 301.0], [235.0, 164.5], [234.0, 217.0], [233.0, 256.3333333333333], [232.0, 160.5], [238.0, 33.0], [247.0, 34.0], [246.0, 31.0], [245.0, 41.0], [244.0, 35.0], [243.0, 274.0], [241.0, 78.0], [240.0, 97.5], [242.0, 18.0], [255.0, 33.333333333333336], [254.0, 36.0], [253.0, 62.5], [252.0, 32.333333333333336], [251.0, 166.0], [250.0, 44.25], [249.0, 38.0], [248.0, 38.5], [270.0, 65.5], [271.0, 83.5], [269.0, 64.5], [268.0, 70.0], [267.0, 68.0], [266.0, 79.0], [265.0, 77.33333333333333], [264.0, 49.0], [263.0, 31.666666666666668], [257.0, 33.25], [256.0, 46.0], [259.0, 30.666666666666668], [258.0, 26.0], [262.0, 21.0], [261.0, 31.0], [260.0, 26.0], [286.0, 30.5], [287.0, 29.5], [285.0, 23.0], [284.0, 31.0], [283.0, 31.0], [282.0, 33.5], [281.0, 43.0], [280.0, 52.5], [279.0, 71.0], [273.0, 17.0], [272.0, 59.5], [275.0, 48.0], [274.0, 71.33333333333333], [278.0, 69.0], [277.0, 69.5], [276.0, 64.5], [290.0, 26.0], [293.0, 33.0], [294.0, 39.0], [295.0, 55.0], [292.0, 22.5], [291.0, 42.0], [301.0, 34.0], [300.0, 27.0], [289.0, 23.5], [288.0, 23.0], [303.0, 31.0], [297.0, 47.0], [296.0, 55.0], [299.0, 29.0], [298.0, 57.0], [302.0, 64.0], [318.0, 16.0], [319.0, 36.0], [317.0, 36.0], [316.0, 30.0], [315.0, 17.0], [314.0, 18.0], [313.0, 20.0], [312.0, 21.0], [310.0, 37.0], [305.0, 22.0], [304.0, 28.0], [307.0, 36.0], [306.0, 14.0], [309.0, 47.0], [308.0, 47.0], [334.0, 28.0], [335.0, 53.0], [333.0, 19.0], [332.0, 42.0], [330.0, 48.0], [329.0, 59.0], [328.0, 62.0], [327.0, 18.0], [321.0, 35.0], [320.0, 28.0], [323.0, 23.0], [322.0, 24.0], [326.0, 17.0], [325.0, 91.0], [324.0, 17.0], [350.0, 45.0], [351.0, 54.0], [349.0, 26.0], [348.0, 36.0], [347.0, 25.0], [346.0, 19.0], [345.0, 14.0], [344.0, 25.0], [343.0, 24.0], [337.0, 29.0], [336.0, 59.0], [339.0, 26.0], [338.0, 27.0], [342.0, 21.0], [341.0, 22.0], [340.0, 32.0], [366.0, 94.0], [367.0, 93.0], [365.0, 71.0], [364.0, 97.0], [363.0, 50.5], [361.0, 57.0], [360.0, 16.0], [359.0, 19.0], [353.0, 43.0], [352.0, 38.0], [355.0, 38.0], [354.0, 33.0], [358.0, 19.0], [357.0, 38.0], [356.0, 38.0], [382.0, 28.0], [383.0, 24.75], [381.0, 27.5], [380.0, 31.0], [379.0, 22.0], [378.0, 25.0], [377.0, 43.0], [376.0, 46.0], [375.0, 37.0], [369.0, 53.0], [368.0, 78.0], [371.0, 46.0], [370.0, 51.0], [374.0, 49.0], [373.0, 60.0], [372.0, 59.0], [386.0, 37.0], [393.0, 34.0], [395.0, 38.0], [394.0, 18.0], [392.0, 34.5], [391.0, 29.0], [390.0, 31.0], [389.0, 36.75], [388.0, 22.0], [387.0, 38.0], [397.0, 27.0], [396.0, 30.0], [399.0, 25.0], [398.0, 22.0], [385.0, 43.0], [384.0, 44.5], [414.0, 29.0], [415.0, 25.0], [413.0, 34.0], [412.0, 35.0], [411.0, 21.0], [409.0, 61.0], [408.0, 21.0], [407.0, 55.0], [401.0, 47.0], [400.0, 37.0], [403.0, 44.0], [402.0, 43.0], [406.0, 53.0], [405.0, 52.0], [404.0, 21.0], [430.0, 23.0], [431.0, 47.0], [429.0, 58.0], [428.0, 57.0], [427.0, 68.0], [426.0, 61.0], [425.0, 50.0], [424.0, 54.0], [423.0, 41.0], [417.0, 26.0], [416.0, 25.0], [419.0, 34.0], [418.0, 30.0], [422.0, 30.0], [421.0, 33.0], [420.0, 34.0], [435.0, 23.0], [447.0, 31.0], [444.0, 24.0], [443.0, 21.666666666666668], [441.0, 16.0], [439.0, 40.0], [438.0, 40.0], [437.0, 41.0], [436.0, 109.0], [434.0, 32.0], [433.0, 19.0], [432.0, 17.0], [461.0, 123.0], [463.0, 130.0], [460.0, 69.0], [451.0, 32.0], [450.0, 35.0], [449.0, 35.0], [448.0, 28.0], [459.0, 45.0], [458.0, 41.0], [457.0, 54.0], [456.0, 18.0], [455.0, 18.0], [454.0, 17.0], [453.0, 24.0], [452.0, 32.0], [479.0, 24.0], [478.0, 21.0], [477.0, 43.5], [476.0, 54.5], [467.0, 52.0], [466.0, 131.0], [465.0, 137.0], [464.0, 141.0], [475.0, 66.5], [474.0, 96.0], [473.0, 95.0], [472.0, 89.0], [471.0, 59.0], [469.0, 69.0], [487.0, 15.0], [486.0, 16.0], [485.0, 555.0], [484.0, 573.0], [483.0, 578.0], [481.0, 23.0], [480.0, 17.0], [1.0, 51.0]], "isOverall": false, "label": "GetUser", "isController": false}, {"data": [[210.90625, 68.84750000000007]], "isOverall": false, "label": "GetUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 487.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3306.6666666666665, "minX": 1.71190656E12, "maxY": 41040.0, "series": [{"data": [[1.71190656E12, 41040.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71190656E12, 3306.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71190656E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 68.84750000000007, "minX": 1.71190656E12, "maxY": 4119.057500000002, "series": [{"data": [[1.71190656E12, 4119.057500000002]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71190656E12, 68.84750000000007]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71190656E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 68.79374999999999, "minX": 1.71190656E12, "maxY": 4118.492500000002, "series": [{"data": [[1.71190656E12, 4118.492500000002]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71190656E12, 68.79374999999999]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71190656E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71190656E12, "maxY": 4030.784999999996, "series": [{"data": [[1.71190656E12, 4030.784999999996]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71190656E12, 0.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71190656E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.71190656E12, "maxY": 13564.0, "series": [{"data": [[1.71190656E12, 13564.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71190656E12, 5879.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71190656E12, 12614.78]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71190656E12, 10342.899999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71190656E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71190656E12, 178.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71190656E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 68.0, "minX": 40.0, "maxY": 3396.5, "series": [{"data": [[130.0, 79.5], [269.0, 139.0], [40.0, 3396.5], [174.0, 371.5], [90.0, 1395.0], [180.0, 180.5], [176.0, 105.5], [191.0, 209.0], [94.0, 201.0], [97.0, 227.0], [119.0, 68.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 269.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 68.0, "minX": 40.0, "maxY": 3395.5, "series": [{"data": [[130.0, 79.5], [269.0, 139.0], [40.0, 3395.5], [174.0, 371.5], [90.0, 1368.5], [180.0, 180.5], [176.0, 105.5], [191.0, 209.0], [94.0, 201.0], [97.0, 227.0], [119.0, 68.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 269.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.71190656E12, "maxY": 26.666666666666668, "series": [{"data": [[1.71190656E12, 26.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71190656E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.71190656E12, "maxY": 26.666666666666668, "series": [{"data": [[1.71190656E12, 26.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71190656E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.71190656E12, "maxY": 13.333333333333334, "series": [{"data": [[1.71190656E12, 13.333333333333334]], "isOverall": false, "label": "GetUser-success", "isController": false}, {"data": [[1.71190656E12, 13.333333333333334]], "isOverall": false, "label": "ProductSearch-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71190656E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.71190656E12, "maxY": 26.666666666666668, "series": [{"data": [[1.71190656E12, 26.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71190656E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

