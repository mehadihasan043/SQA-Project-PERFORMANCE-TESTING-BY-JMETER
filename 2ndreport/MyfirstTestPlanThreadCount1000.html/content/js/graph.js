/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 17499.0, "series": [{"data": [[0.0, 63.0], [0.1, 66.0], [0.2, 67.0], [0.3, 67.0], [0.4, 69.0], [0.5, 70.0], [0.6, 71.0], [0.7, 72.0], [0.8, 72.0], [0.9, 73.0], [1.0, 77.0], [1.1, 77.0], [1.2, 79.0], [1.3, 79.0], [1.4, 81.0], [1.5, 82.0], [1.6, 82.0], [1.7, 84.0], [1.8, 84.0], [1.9, 88.0], [2.0, 88.0], [2.1, 89.0], [2.2, 91.0], [2.3, 91.0], [2.4, 92.0], [2.5, 93.0], [2.6, 93.0], [2.7, 94.0], [2.8, 94.0], [2.9, 94.0], [3.0, 95.0], [3.1, 95.0], [3.2, 97.0], [3.3, 99.0], [3.4, 99.0], [3.5, 103.0], [3.6, 105.0], [3.7, 105.0], [3.8, 106.0], [3.9, 107.0], [4.0, 108.0], [4.1, 109.0], [4.2, 109.0], [4.3, 110.0], [4.4, 110.0], [4.5, 110.0], [4.6, 111.0], [4.7, 113.0], [4.8, 114.0], [4.9, 116.0], [5.0, 117.0], [5.1, 118.0], [5.2, 118.0], [5.3, 120.0], [5.4, 121.0], [5.5, 122.0], [5.6, 122.0], [5.7, 123.0], [5.8, 123.0], [5.9, 124.0], [6.0, 126.0], [6.1, 126.0], [6.2, 126.0], [6.3, 129.0], [6.4, 129.0], [6.5, 130.0], [6.6, 131.0], [6.7, 131.0], [6.8, 131.0], [6.9, 132.0], [7.0, 132.0], [7.1, 132.0], [7.2, 133.0], [7.3, 134.0], [7.4, 134.0], [7.5, 134.0], [7.6, 134.0], [7.7, 136.0], [7.8, 136.0], [7.9, 136.0], [8.0, 137.0], [8.1, 137.0], [8.2, 138.0], [8.3, 138.0], [8.4, 138.0], [8.5, 140.0], [8.6, 141.0], [8.7, 141.0], [8.8, 142.0], [8.9, 143.0], [9.0, 143.0], [9.1, 144.0], [9.2, 144.0], [9.3, 145.0], [9.4, 147.0], [9.5, 147.0], [9.6, 147.0], [9.7, 149.0], [9.8, 150.0], [9.9, 152.0], [10.0, 153.0], [10.1, 153.0], [10.2, 154.0], [10.3, 155.0], [10.4, 156.0], [10.5, 160.0], [10.6, 160.0], [10.7, 161.0], [10.8, 166.0], [10.9, 174.0], [11.0, 174.0], [11.1, 174.0], [11.2, 175.0], [11.3, 177.0], [11.4, 179.0], [11.5, 180.0], [11.6, 181.0], [11.7, 182.0], [11.8, 184.0], [11.9, 184.0], [12.0, 186.0], [12.1, 191.0], [12.2, 195.0], [12.3, 200.0], [12.4, 201.0], [12.5, 203.0], [12.6, 205.0], [12.7, 206.0], [12.8, 208.0], [12.9, 208.0], [13.0, 209.0], [13.1, 212.0], [13.2, 217.0], [13.3, 219.0], [13.4, 220.0], [13.5, 221.0], [13.6, 223.0], [13.7, 224.0], [13.8, 224.0], [13.9, 229.0], [14.0, 230.0], [14.1, 232.0], [14.2, 238.0], [14.3, 242.0], [14.4, 244.0], [14.5, 248.0], [14.6, 248.0], [14.7, 250.0], [14.8, 254.0], [14.9, 254.0], [15.0, 255.0], [15.1, 259.0], [15.2, 266.0], [15.3, 272.0], [15.4, 287.0], [15.5, 298.0], [15.6, 302.0], [15.7, 307.0], [15.8, 308.0], [15.9, 320.0], [16.0, 321.0], [16.1, 321.0], [16.2, 321.0], [16.3, 322.0], [16.4, 322.0], [16.5, 325.0], [16.6, 328.0], [16.7, 348.0], [16.8, 376.0], [16.9, 379.0], [17.0, 394.0], [17.1, 435.0], [17.2, 437.0], [17.3, 465.0], [17.4, 485.0], [17.5, 485.0], [17.6, 517.0], [17.7, 538.0], [17.8, 540.0], [17.9, 545.0], [18.0, 548.0], [18.1, 552.0], [18.2, 573.0], [18.3, 587.0], [18.4, 595.0], [18.5, 596.0], [18.6, 600.0], [18.7, 600.0], [18.8, 615.0], [18.9, 616.0], [19.0, 622.0], [19.1, 625.0], [19.2, 626.0], [19.3, 631.0], [19.4, 641.0], [19.5, 643.0], [19.6, 653.0], [19.7, 667.0], [19.8, 670.0], [19.9, 671.0], [20.0, 680.0], [20.1, 690.0], [20.2, 743.0], [20.3, 747.0], [20.4, 754.0], [20.5, 782.0], [20.6, 783.0], [20.7, 784.0], [20.8, 788.0], [20.9, 791.0], [21.0, 794.0], [21.1, 796.0], [21.2, 799.0], [21.3, 800.0], [21.4, 817.0], [21.5, 819.0], [21.6, 822.0], [21.7, 831.0], [21.8, 834.0], [21.9, 834.0], [22.0, 853.0], [22.1, 857.0], [22.2, 861.0], [22.3, 868.0], [22.4, 876.0], [22.5, 878.0], [22.6, 910.0], [22.7, 915.0], [22.8, 925.0], [22.9, 934.0], [23.0, 951.0], [23.1, 954.0], [23.2, 962.0], [23.3, 962.0], [23.4, 964.0], [23.5, 972.0], [23.6, 977.0], [23.7, 977.0], [23.8, 982.0], [23.9, 989.0], [24.0, 995.0], [24.1, 1018.0], [24.2, 1037.0], [24.3, 1043.0], [24.4, 1065.0], [24.5, 1096.0], [24.6, 1100.0], [24.7, 1221.0], [24.8, 1230.0], [24.9, 1257.0], [25.0, 1428.0], [25.1, 1615.0], [25.2, 1632.0], [25.3, 1638.0], [25.4, 1709.0], [25.5, 1768.0], [25.6, 1775.0], [25.7, 1836.0], [25.8, 1886.0], [25.9, 1894.0], [26.0, 1895.0], [26.1, 1902.0], [26.2, 1902.0], [26.3, 1912.0], [26.4, 1915.0], [26.5, 1955.0], [26.6, 1969.0], [26.7, 2120.0], [26.8, 2183.0], [26.9, 2232.0], [27.0, 2248.0], [27.1, 2263.0], [27.2, 2283.0], [27.3, 2308.0], [27.4, 2343.0], [27.5, 2362.0], [27.6, 2375.0], [27.7, 2423.0], [27.8, 2502.0], [27.9, 2503.0], [28.0, 2538.0], [28.1, 2623.0], [28.2, 2641.0], [28.3, 2643.0], [28.4, 2643.0], [28.5, 2662.0], [28.6, 2705.0], [28.7, 2758.0], [28.8, 2764.0], [28.9, 2783.0], [29.0, 2930.0], [29.1, 2969.0], [29.2, 2978.0], [29.3, 2980.0], [29.4, 3029.0], [29.5, 3042.0], [29.6, 3068.0], [29.7, 3069.0], [29.8, 3098.0], [29.9, 3119.0], [30.0, 3125.0], [30.1, 3140.0], [30.2, 3249.0], [30.3, 3264.0], [30.4, 3265.0], [30.5, 3270.0], [30.6, 3313.0], [30.7, 3322.0], [30.8, 3334.0], [30.9, 3343.0], [31.0, 3346.0], [31.1, 3372.0], [31.2, 3405.0], [31.3, 3556.0], [31.4, 3568.0], [31.5, 3603.0], [31.6, 3617.0], [31.7, 3624.0], [31.8, 3625.0], [31.9, 3707.0], [32.0, 3707.0], [32.1, 3715.0], [32.2, 3716.0], [32.3, 3727.0], [32.4, 3758.0], [32.5, 3760.0], [32.6, 3769.0], [32.7, 3785.0], [32.8, 3793.0], [32.9, 3808.0], [33.0, 3829.0], [33.1, 3919.0], [33.2, 3945.0], [33.3, 3950.0], [33.4, 3953.0], [33.5, 3955.0], [33.6, 3962.0], [33.7, 3966.0], [33.8, 3967.0], [33.9, 3989.0], [34.0, 3991.0], [34.1, 3993.0], [34.2, 3994.0], [34.3, 3997.0], [34.4, 3998.0], [34.5, 4001.0], [34.6, 4003.0], [34.7, 4010.0], [34.8, 4017.0], [34.9, 4027.0], [35.0, 4030.0], [35.1, 4040.0], [35.2, 4042.0], [35.3, 4108.0], [35.4, 4108.0], [35.5, 4120.0], [35.6, 4128.0], [35.7, 4134.0], [35.8, 4134.0], [35.9, 4135.0], [36.0, 4135.0], [36.1, 4138.0], [36.2, 4143.0], [36.3, 4147.0], [36.4, 4147.0], [36.5, 4148.0], [36.6, 4148.0], [36.7, 4150.0], [36.8, 4154.0], [36.9, 4167.0], [37.0, 4196.0], [37.1, 4211.0], [37.2, 4553.0], [37.3, 4566.0], [37.4, 4596.0], [37.5, 4702.0], [37.6, 4849.0], [37.7, 4886.0], [37.8, 4912.0], [37.9, 4922.0], [38.0, 4930.0], [38.1, 4942.0], [38.2, 4964.0], [38.3, 5046.0], [38.4, 5086.0], [38.5, 5220.0], [38.6, 5257.0], [38.7, 5267.0], [38.8, 5352.0], [38.9, 5368.0], [39.0, 5429.0], [39.1, 5489.0], [39.2, 5494.0], [39.3, 5530.0], [39.4, 5537.0], [39.5, 5614.0], [39.6, 5619.0], [39.7, 5626.0], [39.8, 5637.0], [39.9, 5653.0], [40.0, 5654.0], [40.1, 5660.0], [40.2, 5666.0], [40.3, 5669.0], [40.4, 5673.0], [40.5, 5685.0], [40.6, 5697.0], [40.7, 5709.0], [40.8, 5714.0], [40.9, 5720.0], [41.0, 5721.0], [41.1, 5780.0], [41.2, 5789.0], [41.3, 5796.0], [41.4, 5821.0], [41.5, 5836.0], [41.6, 5888.0], [41.7, 5933.0], [41.8, 6047.0], [41.9, 6099.0], [42.0, 6100.0], [42.1, 6144.0], [42.2, 6161.0], [42.3, 6226.0], [42.4, 6251.0], [42.5, 6286.0], [42.6, 6291.0], [42.7, 6297.0], [42.8, 6300.0], [42.9, 6302.0], [43.0, 6306.0], [43.1, 6321.0], [43.2, 6325.0], [43.3, 6340.0], [43.4, 6348.0], [43.5, 6357.0], [43.6, 6360.0], [43.7, 6373.0], [43.8, 6380.0], [43.9, 6392.0], [44.0, 6406.0], [44.1, 6421.0], [44.2, 6429.0], [44.3, 6434.0], [44.4, 6437.0], [44.5, 6437.0], [44.6, 6453.0], [44.7, 6470.0], [44.8, 6472.0], [44.9, 6485.0], [45.0, 6521.0], [45.1, 6579.0], [45.2, 6601.0], [45.3, 6630.0], [45.4, 6646.0], [45.5, 6653.0], [45.6, 6655.0], [45.7, 6657.0], [45.8, 6663.0], [45.9, 6758.0], [46.0, 6759.0], [46.1, 6778.0], [46.2, 6781.0], [46.3, 6830.0], [46.4, 6856.0], [46.5, 6861.0], [46.6, 6876.0], [46.7, 6882.0], [46.8, 6887.0], [46.9, 6889.0], [47.0, 6977.0], [47.1, 6978.0], [47.2, 6984.0], [47.3, 6998.0], [47.4, 7019.0], [47.5, 7033.0], [47.6, 7087.0], [47.7, 7214.0], [47.8, 7225.0], [47.9, 7247.0], [48.0, 7265.0], [48.1, 7278.0], [48.2, 7307.0], [48.3, 7315.0], [48.4, 7319.0], [48.5, 7328.0], [48.6, 7337.0], [48.7, 7347.0], [48.8, 7406.0], [48.9, 7429.0], [49.0, 7437.0], [49.1, 7444.0], [49.2, 7450.0], [49.3, 7454.0], [49.4, 7457.0], [49.5, 7469.0], [49.6, 7479.0], [49.7, 7484.0], [49.8, 7490.0], [49.9, 7494.0], [50.0, 7657.0], [50.1, 7681.0], [50.2, 7736.0], [50.3, 7781.0], [50.4, 7860.0], [50.5, 7874.0], [50.6, 7966.0], [50.7, 7971.0], [50.8, 7972.0], [50.9, 7980.0], [51.0, 8062.0], [51.1, 8080.0], [51.2, 8125.0], [51.3, 8140.0], [51.4, 8226.0], [51.5, 8235.0], [51.6, 8246.0], [51.7, 8247.0], [51.8, 8255.0], [51.9, 8257.0], [52.0, 8257.0], [52.1, 8259.0], [52.2, 8267.0], [52.3, 8268.0], [52.4, 8268.0], [52.5, 8268.0], [52.6, 8269.0], [52.7, 8304.0], [52.8, 8330.0], [52.9, 8336.0], [53.0, 8355.0], [53.1, 8402.0], [53.2, 8542.0], [53.3, 8556.0], [53.4, 8560.0], [53.5, 8569.0], [53.6, 8573.0], [53.7, 8582.0], [53.8, 8671.0], [53.9, 8676.0], [54.0, 8681.0], [54.1, 8701.0], [54.2, 8719.0], [54.3, 8761.0], [54.4, 8804.0], [54.5, 8851.0], [54.6, 8864.0], [54.7, 8875.0], [54.8, 8889.0], [54.9, 8894.0], [55.0, 8914.0], [55.1, 9002.0], [55.2, 9048.0], [55.3, 9141.0], [55.4, 9178.0], [55.5, 9265.0], [55.6, 9448.0], [55.7, 9589.0], [55.8, 9640.0], [55.9, 9697.0], [56.0, 9736.0], [56.1, 9745.0], [56.2, 9794.0], [56.3, 9816.0], [56.4, 9819.0], [56.5, 9833.0], [56.6, 9841.0], [56.7, 9850.0], [56.8, 9918.0], [56.9, 9920.0], [57.0, 9959.0], [57.1, 9960.0], [57.2, 9962.0], [57.3, 9976.0], [57.4, 9980.0], [57.5, 9982.0], [57.6, 9994.0], [57.7, 10008.0], [57.8, 10010.0], [57.9, 10012.0], [58.0, 10015.0], [58.1, 10018.0], [58.2, 10022.0], [58.3, 10022.0], [58.4, 10026.0], [58.5, 10030.0], [58.6, 10030.0], [58.7, 10038.0], [58.8, 10041.0], [58.9, 10056.0], [59.0, 10056.0], [59.1, 10061.0], [59.2, 10080.0], [59.3, 10086.0], [59.4, 10103.0], [59.5, 10118.0], [59.6, 10233.0], [59.7, 10247.0], [59.8, 10754.0], [59.9, 10798.0], [60.0, 10801.0], [60.1, 10801.0], [60.2, 10802.0], [60.3, 10816.0], [60.4, 11006.0], [60.5, 11008.0], [60.6, 11064.0], [60.7, 11126.0], [60.8, 11206.0], [60.9, 11213.0], [61.0, 11240.0], [61.1, 11251.0], [61.2, 11258.0], [61.3, 11266.0], [61.4, 11268.0], [61.5, 11278.0], [61.6, 11291.0], [61.7, 11304.0], [61.8, 11385.0], [61.9, 11393.0], [62.0, 11410.0], [62.1, 11440.0], [62.2, 11468.0], [62.3, 11504.0], [62.4, 11505.0], [62.5, 11513.0], [62.6, 11519.0], [62.7, 11575.0], [62.8, 11608.0], [62.9, 11613.0], [63.0, 11615.0], [63.1, 11628.0], [63.2, 11629.0], [63.3, 11629.0], [63.4, 11642.0], [63.5, 11647.0], [63.6, 11648.0], [63.7, 11656.0], [63.8, 11668.0], [63.9, 11670.0], [64.0, 11672.0], [64.1, 11678.0], [64.2, 11685.0], [64.3, 11690.0], [64.4, 11694.0], [64.5, 11697.0], [64.6, 11705.0], [64.7, 11712.0], [64.8, 11715.0], [64.9, 11722.0], [65.0, 11728.0], [65.1, 11734.0], [65.2, 11736.0], [65.3, 11748.0], [65.4, 11765.0], [65.5, 11775.0], [65.6, 11777.0], [65.7, 11780.0], [65.8, 11799.0], [65.9, 11805.0], [66.0, 11811.0], [66.1, 11817.0], [66.2, 11817.0], [66.3, 11825.0], [66.4, 11857.0], [66.5, 11890.0], [66.6, 11926.0], [66.7, 11958.0], [66.8, 11967.0], [66.9, 11970.0], [67.0, 11971.0], [67.1, 11974.0], [67.2, 12022.0], [67.3, 12031.0], [67.4, 12042.0], [67.5, 12048.0], [67.6, 12050.0], [67.7, 12066.0], [67.8, 12074.0], [67.9, 12098.0], [68.0, 12099.0], [68.1, 12105.0], [68.2, 12120.0], [68.3, 12130.0], [68.4, 12137.0], [68.5, 12140.0], [68.6, 12143.0], [68.7, 12147.0], [68.8, 12148.0], [68.9, 12154.0], [69.0, 12155.0], [69.1, 12163.0], [69.2, 12177.0], [69.3, 12186.0], [69.4, 12196.0], [69.5, 12212.0], [69.6, 12216.0], [69.7, 12217.0], [69.8, 12220.0], [69.9, 12222.0], [70.0, 12223.0], [70.1, 12224.0], [70.2, 12234.0], [70.3, 12274.0], [70.4, 12278.0], [70.5, 12304.0], [70.6, 12323.0], [70.7, 12336.0], [70.8, 12337.0], [70.9, 12337.0], [71.0, 12343.0], [71.1, 12347.0], [71.2, 12356.0], [71.3, 12360.0], [71.4, 12362.0], [71.5, 12363.0], [71.6, 12364.0], [71.7, 12371.0], [71.8, 12375.0], [71.9, 12395.0], [72.0, 12401.0], [72.1, 12402.0], [72.2, 12405.0], [72.3, 12423.0], [72.4, 12424.0], [72.5, 12430.0], [72.6, 12438.0], [72.7, 12445.0], [72.8, 12460.0], [72.9, 12476.0], [73.0, 12481.0], [73.1, 12497.0], [73.2, 12504.0], [73.3, 12508.0], [73.4, 12509.0], [73.5, 12512.0], [73.6, 12533.0], [73.7, 12538.0], [73.8, 12538.0], [73.9, 12539.0], [74.0, 12544.0], [74.1, 12549.0], [74.2, 12553.0], [74.3, 12561.0], [74.4, 12568.0], [74.5, 12570.0], [74.6, 12572.0], [74.7, 12573.0], [74.8, 12574.0], [74.9, 12575.0], [75.0, 12581.0], [75.1, 12591.0], [75.2, 12598.0], [75.3, 12598.0], [75.4, 12604.0], [75.5, 12606.0], [75.6, 12607.0], [75.7, 12615.0], [75.8, 12620.0], [75.9, 12625.0], [76.0, 12626.0], [76.1, 12629.0], [76.2, 12632.0], [76.3, 12632.0], [76.4, 12635.0], [76.5, 12636.0], [76.6, 12641.0], [76.7, 12647.0], [76.8, 12650.0], [76.9, 12653.0], [77.0, 12662.0], [77.1, 12664.0], [77.2, 12664.0], [77.3, 12665.0], [77.4, 12666.0], [77.5, 12667.0], [77.6, 12669.0], [77.7, 12675.0], [77.8, 12677.0], [77.9, 12679.0], [78.0, 12679.0], [78.1, 12681.0], [78.2, 12687.0], [78.3, 12691.0], [78.4, 12692.0], [78.5, 12693.0], [78.6, 12695.0], [78.7, 12699.0], [78.8, 12702.0], [78.9, 12711.0], [79.0, 12722.0], [79.1, 12724.0], [79.2, 12728.0], [79.3, 12728.0], [79.4, 12730.0], [79.5, 12736.0], [79.6, 12745.0], [79.7, 12749.0], [79.8, 12756.0], [79.9, 12758.0], [80.0, 12767.0], [80.1, 12770.0], [80.2, 12780.0], [80.3, 12780.0], [80.4, 12791.0], [80.5, 12792.0], [80.6, 12793.0], [80.7, 12797.0], [80.8, 12806.0], [80.9, 12810.0], [81.0, 12819.0], [81.1, 12821.0], [81.2, 12821.0], [81.3, 12825.0], [81.4, 12830.0], [81.5, 12830.0], [81.6, 12831.0], [81.7, 12838.0], [81.8, 12839.0], [81.9, 12842.0], [82.0, 12844.0], [82.1, 12847.0], [82.2, 12863.0], [82.3, 12865.0], [82.4, 12867.0], [82.5, 12871.0], [82.6, 12874.0], [82.7, 12884.0], [82.8, 12885.0], [82.9, 12889.0], [83.0, 12889.0], [83.1, 12892.0], [83.2, 12914.0], [83.3, 12919.0], [83.4, 12965.0], [83.5, 12981.0], [83.6, 12981.0], [83.7, 13002.0], [83.8, 13012.0], [83.9, 13014.0], [84.0, 13018.0], [84.1, 13025.0], [84.2, 13029.0], [84.3, 13046.0], [84.4, 13050.0], [84.5, 13054.0], [84.6, 13057.0], [84.7, 13061.0], [84.8, 13063.0], [84.9, 13066.0], [85.0, 13066.0], [85.1, 13072.0], [85.2, 13072.0], [85.3, 13073.0], [85.4, 13076.0], [85.5, 13079.0], [85.6, 13094.0], [85.7, 13108.0], [85.8, 13108.0], [85.9, 13111.0], [86.0, 13112.0], [86.1, 13113.0], [86.2, 13113.0], [86.3, 13115.0], [86.4, 13115.0], [86.5, 13118.0], [86.6, 13127.0], [86.7, 13129.0], [86.8, 13130.0], [86.9, 13145.0], [87.0, 13150.0], [87.1, 13155.0], [87.2, 13182.0], [87.3, 13253.0], [87.4, 13258.0], [87.5, 13261.0], [87.6, 13272.0], [87.7, 13276.0], [87.8, 13281.0], [87.9, 13296.0], [88.0, 13361.0], [88.1, 13389.0], [88.2, 13405.0], [88.3, 13427.0], [88.4, 13442.0], [88.5, 13444.0], [88.6, 13471.0], [88.7, 13476.0], [88.8, 13503.0], [88.9, 13535.0], [89.0, 13575.0], [89.1, 13593.0], [89.2, 13594.0], [89.3, 13601.0], [89.4, 13655.0], [89.5, 13658.0], [89.6, 13662.0], [89.7, 13662.0], [89.8, 13664.0], [89.9, 13694.0], [90.0, 13708.0], [90.1, 13720.0], [90.2, 13847.0], [90.3, 13899.0], [90.4, 13906.0], [90.5, 13935.0], [90.6, 13952.0], [90.7, 13986.0], [90.8, 14011.0], [90.9, 14027.0], [91.0, 14078.0], [91.1, 14108.0], [91.2, 14143.0], [91.3, 14157.0], [91.4, 14161.0], [91.5, 14206.0], [91.6, 14231.0], [91.7, 14245.0], [91.8, 14286.0], [91.9, 14300.0], [92.0, 14359.0], [92.1, 14361.0], [92.2, 14380.0], [92.3, 14402.0], [92.4, 14482.0], [92.5, 14484.0], [92.6, 14497.0], [92.7, 14544.0], [92.8, 14546.0], [92.9, 14564.0], [93.0, 14601.0], [93.1, 14640.0], [93.2, 14649.0], [93.3, 14662.0], [93.4, 14673.0], [93.5, 14677.0], [93.6, 14678.0], [93.7, 14722.0], [93.8, 14733.0], [93.9, 14738.0], [94.0, 14744.0], [94.1, 14765.0], [94.2, 14834.0], [94.3, 14929.0], [94.4, 15036.0], [94.5, 15045.0], [94.6, 15090.0], [94.7, 15093.0], [94.8, 15103.0], [94.9, 15116.0], [95.0, 15122.0], [95.1, 15124.0], [95.2, 15126.0], [95.3, 15130.0], [95.4, 15137.0], [95.5, 15139.0], [95.6, 15238.0], [95.7, 15252.0], [95.8, 15256.0], [95.9, 15257.0], [96.0, 15264.0], [96.1, 15265.0], [96.2, 15274.0], [96.3, 15283.0], [96.4, 15297.0], [96.5, 15304.0], [96.6, 15334.0], [96.7, 15425.0], [96.8, 15465.0], [96.9, 15481.0], [97.0, 15498.0], [97.1, 15503.0], [97.2, 15551.0], [97.3, 15603.0], [97.4, 15605.0], [97.5, 15619.0], [97.6, 15640.0], [97.7, 15648.0], [97.8, 15656.0], [97.9, 15678.0], [98.0, 15747.0], [98.1, 15755.0], [98.2, 15851.0], [98.3, 16080.0], [98.4, 16090.0], [98.5, 16120.0], [98.6, 16218.0], [98.7, 16218.0], [98.8, 16256.0], [98.9, 16284.0], [99.0, 16288.0], [99.1, 16394.0], [99.2, 16683.0], [99.3, 16717.0], [99.4, 16773.0], [99.5, 16883.0], [99.6, 16941.0], [99.7, 17451.0], [99.8, 17464.0], [99.9, 17499.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 13.0], [0.1, 13.0], [0.2, 13.0], [0.3, 13.0], [0.4, 13.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 14.0], [1.1, 14.0], [1.2, 14.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 15.0], [2.1, 16.0], [2.2, 16.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 16.0], [3.2, 16.0], [3.3, 16.0], [3.4, 16.0], [3.5, 16.0], [3.6, 16.0], [3.7, 16.0], [3.8, 16.0], [3.9, 16.0], [4.0, 16.0], [4.1, 16.0], [4.2, 17.0], [4.3, 17.0], [4.4, 17.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 17.0], [5.1, 17.0], [5.2, 17.0], [5.3, 17.0], [5.4, 17.0], [5.5, 17.0], [5.6, 17.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 18.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 18.0], [7.7, 18.0], [7.8, 18.0], [7.9, 18.0], [8.0, 18.0], [8.1, 18.0], [8.2, 19.0], [8.3, 19.0], [8.4, 19.0], [8.5, 19.0], [8.6, 19.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 19.0], [9.1, 19.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 19.0], [9.6, 19.0], [9.7, 19.0], [9.8, 19.0], [9.9, 19.0], [10.0, 19.0], [10.1, 20.0], [10.2, 20.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 21.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 21.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 22.0], [13.1, 22.0], [13.2, 22.0], [13.3, 22.0], [13.4, 22.0], [13.5, 22.0], [13.6, 22.0], [13.7, 22.0], [13.8, 22.0], [13.9, 22.0], [14.0, 22.0], [14.1, 22.0], [14.2, 22.0], [14.3, 23.0], [14.4, 23.0], [14.5, 23.0], [14.6, 23.0], [14.7, 23.0], [14.8, 23.0], [14.9, 23.0], [15.0, 23.0], [15.1, 23.0], [15.2, 23.0], [15.3, 23.0], [15.4, 23.0], [15.5, 23.0], [15.6, 23.0], [15.7, 23.0], [15.8, 24.0], [15.9, 24.0], [16.0, 24.0], [16.1, 24.0], [16.2, 24.0], [16.3, 24.0], [16.4, 24.0], [16.5, 24.0], [16.6, 24.0], [16.7, 25.0], [16.8, 25.0], [16.9, 25.0], [17.0, 25.0], [17.1, 25.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 25.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 26.0], [18.0, 26.0], [18.1, 26.0], [18.2, 26.0], [18.3, 26.0], [18.4, 26.0], [18.5, 26.0], [18.6, 26.0], [18.7, 26.0], [18.8, 26.0], [18.9, 27.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 28.0], [19.8, 28.0], [19.9, 28.0], [20.0, 28.0], [20.1, 28.0], [20.2, 28.0], [20.3, 28.0], [20.4, 28.0], [20.5, 28.0], [20.6, 28.0], [20.7, 28.0], [20.8, 28.0], [20.9, 28.0], [21.0, 28.0], [21.1, 28.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 29.0], [21.6, 29.0], [21.7, 29.0], [21.8, 29.0], [21.9, 29.0], [22.0, 29.0], [22.1, 29.0], [22.2, 29.0], [22.3, 29.0], [22.4, 29.0], [22.5, 29.0], [22.6, 29.0], [22.7, 29.0], [22.8, 29.0], [22.9, 29.0], [23.0, 29.0], [23.1, 30.0], [23.2, 30.0], [23.3, 30.0], [23.4, 30.0], [23.5, 30.0], [23.6, 30.0], [23.7, 30.0], [23.8, 30.0], [23.9, 30.0], [24.0, 30.0], [24.1, 30.0], [24.2, 30.0], [24.3, 30.0], [24.4, 30.0], [24.5, 30.0], [24.6, 30.0], [24.7, 30.0], [24.8, 30.0], [24.9, 30.0], [25.0, 30.0], [25.1, 31.0], [25.2, 31.0], [25.3, 31.0], [25.4, 31.0], [25.5, 31.0], [25.6, 31.0], [25.7, 31.0], [25.8, 31.0], [25.9, 31.0], [26.0, 31.0], [26.1, 31.0], [26.2, 31.0], [26.3, 32.0], [26.4, 32.0], [26.5, 32.0], [26.6, 32.0], [26.7, 32.0], [26.8, 32.0], [26.9, 32.0], [27.0, 32.0], [27.1, 32.0], [27.2, 32.0], [27.3, 32.0], [27.4, 32.0], [27.5, 32.0], [27.6, 32.0], [27.7, 32.0], [27.8, 32.0], [27.9, 33.0], [28.0, 33.0], [28.1, 33.0], [28.2, 33.0], [28.3, 33.0], [28.4, 33.0], [28.5, 33.0], [28.6, 33.0], [28.7, 33.0], [28.8, 33.0], [28.9, 33.0], [29.0, 33.0], [29.1, 33.0], [29.2, 33.0], [29.3, 33.0], [29.4, 33.0], [29.5, 33.0], [29.6, 34.0], [29.7, 34.0], [29.8, 34.0], [29.9, 34.0], [30.0, 34.0], [30.1, 34.0], [30.2, 34.0], [30.3, 34.0], [30.4, 34.0], [30.5, 34.0], [30.6, 35.0], [30.7, 35.0], [30.8, 35.0], [30.9, 35.0], [31.0, 35.0], [31.1, 35.0], [31.2, 35.0], [31.3, 35.0], [31.4, 35.0], [31.5, 35.0], [31.6, 35.0], [31.7, 35.0], [31.8, 36.0], [31.9, 36.0], [32.0, 36.0], [32.1, 36.0], [32.2, 36.0], [32.3, 36.0], [32.4, 36.0], [32.5, 36.0], [32.6, 36.0], [32.7, 36.0], [32.8, 36.0], [32.9, 36.0], [33.0, 37.0], [33.1, 37.0], [33.2, 37.0], [33.3, 37.0], [33.4, 37.0], [33.5, 37.0], [33.6, 37.0], [33.7, 37.0], [33.8, 37.0], [33.9, 37.0], [34.0, 37.0], [34.1, 37.0], [34.2, 37.0], [34.3, 37.0], [34.4, 37.0], [34.5, 37.0], [34.6, 37.0], [34.7, 37.0], [34.8, 37.0], [34.9, 38.0], [35.0, 38.0], [35.1, 38.0], [35.2, 38.0], [35.3, 38.0], [35.4, 38.0], [35.5, 38.0], [35.6, 38.0], [35.7, 39.0], [35.8, 39.0], [35.9, 39.0], [36.0, 39.0], [36.1, 39.0], [36.2, 39.0], [36.3, 39.0], [36.4, 39.0], [36.5, 39.0], [36.6, 39.0], [36.7, 39.0], [36.8, 39.0], [36.9, 39.0], [37.0, 40.0], [37.1, 40.0], [37.2, 40.0], [37.3, 40.0], [37.4, 40.0], [37.5, 40.0], [37.6, 40.0], [37.7, 40.0], [37.8, 40.0], [37.9, 40.0], [38.0, 41.0], [38.1, 41.0], [38.2, 41.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 43.0], [39.8, 43.0], [39.9, 43.0], [40.0, 43.0], [40.1, 43.0], [40.2, 43.0], [40.3, 43.0], [40.4, 44.0], [40.5, 44.0], [40.6, 44.0], [40.7, 44.0], [40.8, 44.0], [40.9, 44.0], [41.0, 44.0], [41.1, 44.0], [41.2, 44.0], [41.3, 44.0], [41.4, 44.0], [41.5, 44.0], [41.6, 44.0], [41.7, 45.0], [41.8, 45.0], [41.9, 45.0], [42.0, 45.0], [42.1, 45.0], [42.2, 45.0], [42.3, 45.0], [42.4, 45.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 46.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 46.0], [44.3, 46.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 47.0], [45.2, 47.0], [45.3, 47.0], [45.4, 47.0], [45.5, 47.0], [45.6, 47.0], [45.7, 48.0], [45.8, 48.0], [45.9, 48.0], [46.0, 48.0], [46.1, 48.0], [46.2, 48.0], [46.3, 48.0], [46.4, 48.0], [46.5, 48.0], [46.6, 48.0], [46.7, 48.0], [46.8, 48.0], [46.9, 48.0], [47.0, 48.0], [47.1, 49.0], [47.2, 49.0], [47.3, 49.0], [47.4, 49.0], [47.5, 49.0], [47.6, 49.0], [47.7, 50.0], [47.8, 50.0], [47.9, 50.0], [48.0, 50.0], [48.1, 50.0], [48.2, 50.0], [48.3, 50.0], [48.4, 50.0], [48.5, 50.0], [48.6, 50.0], [48.7, 51.0], [48.8, 51.0], [48.9, 51.0], [49.0, 51.0], [49.1, 51.0], [49.2, 51.0], [49.3, 52.0], [49.4, 52.0], [49.5, 52.0], [49.6, 52.0], [49.7, 52.0], [49.8, 52.0], [49.9, 52.0], [50.0, 52.0], [50.1, 52.0], [50.2, 53.0], [50.3, 53.0], [50.4, 53.0], [50.5, 53.0], [50.6, 53.0], [50.7, 53.0], [50.8, 53.0], [50.9, 53.0], [51.0, 53.0], [51.1, 54.0], [51.2, 54.0], [51.3, 54.0], [51.4, 54.0], [51.5, 54.0], [51.6, 54.0], [51.7, 54.0], [51.8, 55.0], [51.9, 55.0], [52.0, 55.0], [52.1, 55.0], [52.2, 55.0], [52.3, 55.0], [52.4, 55.0], [52.5, 56.0], [52.6, 56.0], [52.7, 56.0], [52.8, 56.0], [52.9, 56.0], [53.0, 56.0], [53.1, 56.0], [53.2, 56.0], [53.3, 56.0], [53.4, 57.0], [53.5, 57.0], [53.6, 57.0], [53.7, 58.0], [53.8, 58.0], [53.9, 58.0], [54.0, 58.0], [54.1, 58.0], [54.2, 59.0], [54.3, 59.0], [54.4, 59.0], [54.5, 59.0], [54.6, 60.0], [54.7, 60.0], [54.8, 60.0], [54.9, 60.0], [55.0, 60.0], [55.1, 60.0], [55.2, 61.0], [55.3, 61.0], [55.4, 61.0], [55.5, 61.0], [55.6, 61.0], [55.7, 62.0], [55.8, 62.0], [55.9, 62.0], [56.0, 62.0], [56.1, 62.0], [56.2, 63.0], [56.3, 63.0], [56.4, 64.0], [56.5, 64.0], [56.6, 64.0], [56.7, 65.0], [56.8, 65.0], [56.9, 65.0], [57.0, 65.0], [57.1, 65.0], [57.2, 65.0], [57.3, 65.0], [57.4, 66.0], [57.5, 66.0], [57.6, 66.0], [57.7, 66.0], [57.8, 66.0], [57.9, 67.0], [58.0, 67.0], [58.1, 67.0], [58.2, 67.0], [58.3, 68.0], [58.4, 69.0], [58.5, 69.0], [58.6, 70.0], [58.7, 70.0], [58.8, 70.0], [58.9, 70.0], [59.0, 71.0], [59.1, 71.0], [59.2, 71.0], [59.3, 71.0], [59.4, 71.0], [59.5, 72.0], [59.6, 72.0], [59.7, 72.0], [59.8, 72.0], [59.9, 72.0], [60.0, 73.0], [60.1, 73.0], [60.2, 73.0], [60.3, 73.0], [60.4, 74.0], [60.5, 75.0], [60.6, 76.0], [60.7, 76.0], [60.8, 77.0], [60.9, 77.0], [61.0, 78.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 80.0], [61.8, 80.0], [61.9, 80.0], [62.0, 81.0], [62.1, 81.0], [62.2, 82.0], [62.3, 82.0], [62.4, 82.0], [62.5, 83.0], [62.6, 86.0], [62.7, 87.0], [62.8, 88.0], [62.9, 89.0], [63.0, 89.0], [63.1, 90.0], [63.2, 91.0], [63.3, 91.0], [63.4, 92.0], [63.5, 92.0], [63.6, 92.0], [63.7, 93.0], [63.8, 94.0], [63.9, 95.0], [64.0, 95.0], [64.1, 95.0], [64.2, 96.0], [64.3, 96.0], [64.4, 96.0], [64.5, 96.0], [64.6, 96.0], [64.7, 99.0], [64.8, 99.0], [64.9, 100.0], [65.0, 100.0], [65.1, 100.0], [65.2, 100.0], [65.3, 100.0], [65.4, 101.0], [65.5, 101.0], [65.6, 102.0], [65.7, 102.0], [65.8, 102.0], [65.9, 103.0], [66.0, 103.0], [66.1, 103.0], [66.2, 103.0], [66.3, 103.0], [66.4, 104.0], [66.5, 105.0], [66.6, 105.0], [66.7, 105.0], [66.8, 105.0], [66.9, 106.0], [67.0, 106.0], [67.1, 106.0], [67.2, 106.0], [67.3, 106.0], [67.4, 106.0], [67.5, 106.0], [67.6, 106.0], [67.7, 107.0], [67.8, 107.0], [67.9, 107.0], [68.0, 108.0], [68.1, 108.0], [68.2, 108.0], [68.3, 109.0], [68.4, 109.0], [68.5, 110.0], [68.6, 110.0], [68.7, 110.0], [68.8, 110.0], [68.9, 110.0], [69.0, 110.0], [69.1, 112.0], [69.2, 113.0], [69.3, 113.0], [69.4, 113.0], [69.5, 113.0], [69.6, 114.0], [69.7, 116.0], [69.8, 116.0], [69.9, 116.0], [70.0, 116.0], [70.1, 116.0], [70.2, 117.0], [70.3, 117.0], [70.4, 117.0], [70.5, 118.0], [70.6, 118.0], [70.7, 119.0], [70.8, 119.0], [70.9, 119.0], [71.0, 121.0], [71.1, 122.0], [71.2, 123.0], [71.3, 124.0], [71.4, 124.0], [71.5, 125.0], [71.6, 126.0], [71.7, 126.0], [71.8, 127.0], [71.9, 127.0], [72.0, 127.0], [72.1, 128.0], [72.2, 129.0], [72.3, 129.0], [72.4, 129.0], [72.5, 130.0], [72.6, 130.0], [72.7, 130.0], [72.8, 131.0], [72.9, 131.0], [73.0, 131.0], [73.1, 132.0], [73.2, 132.0], [73.3, 132.0], [73.4, 132.0], [73.5, 133.0], [73.6, 133.0], [73.7, 133.0], [73.8, 133.0], [73.9, 133.0], [74.0, 133.0], [74.1, 133.0], [74.2, 133.0], [74.3, 134.0], [74.4, 134.0], [74.5, 134.0], [74.6, 134.0], [74.7, 134.0], [74.8, 134.0], [74.9, 135.0], [75.0, 135.0], [75.1, 135.0], [75.2, 135.0], [75.3, 135.0], [75.4, 135.0], [75.5, 136.0], [75.6, 136.0], [75.7, 137.0], [75.8, 137.0], [75.9, 139.0], [76.0, 139.0], [76.1, 139.0], [76.2, 139.0], [76.3, 139.0], [76.4, 139.0], [76.5, 140.0], [76.6, 140.0], [76.7, 140.0], [76.8, 140.0], [76.9, 140.0], [77.0, 140.0], [77.1, 141.0], [77.2, 141.0], [77.3, 142.0], [77.4, 142.0], [77.5, 142.0], [77.6, 142.0], [77.7, 142.0], [77.8, 142.0], [77.9, 142.0], [78.0, 143.0], [78.1, 143.0], [78.2, 143.0], [78.3, 143.0], [78.4, 143.0], [78.5, 144.0], [78.6, 144.0], [78.7, 144.0], [78.8, 144.0], [78.9, 144.0], [79.0, 145.0], [79.1, 145.0], [79.2, 145.0], [79.3, 145.0], [79.4, 146.0], [79.5, 146.0], [79.6, 147.0], [79.7, 147.0], [79.8, 147.0], [79.9, 147.0], [80.0, 147.0], [80.1, 148.0], [80.2, 148.0], [80.3, 149.0], [80.4, 149.0], [80.5, 151.0], [80.6, 151.0], [80.7, 151.0], [80.8, 151.0], [80.9, 151.0], [81.0, 152.0], [81.1, 152.0], [81.2, 153.0], [81.3, 153.0], [81.4, 154.0], [81.5, 155.0], [81.6, 155.0], [81.7, 156.0], [81.8, 156.0], [81.9, 157.0], [82.0, 157.0], [82.1, 158.0], [82.2, 159.0], [82.3, 159.0], [82.4, 160.0], [82.5, 162.0], [82.6, 164.0], [82.7, 164.0], [82.8, 165.0], [82.9, 165.0], [83.0, 165.0], [83.1, 166.0], [83.2, 168.0], [83.3, 168.0], [83.4, 169.0], [83.5, 169.0], [83.6, 169.0], [83.7, 171.0], [83.8, 174.0], [83.9, 174.0], [84.0, 175.0], [84.1, 177.0], [84.2, 182.0], [84.3, 184.0], [84.4, 185.0], [84.5, 187.0], [84.6, 187.0], [84.7, 188.0], [84.8, 190.0], [84.9, 192.0], [85.0, 195.0], [85.1, 196.0], [85.2, 196.0], [85.3, 196.0], [85.4, 196.0], [85.5, 203.0], [85.6, 206.0], [85.7, 207.0], [85.8, 216.0], [85.9, 216.0], [86.0, 217.0], [86.1, 217.0], [86.2, 217.0], [86.3, 218.0], [86.4, 219.0], [86.5, 221.0], [86.6, 222.0], [86.7, 223.0], [86.8, 223.0], [86.9, 223.0], [87.0, 225.0], [87.1, 226.0], [87.2, 228.0], [87.3, 231.0], [87.4, 231.0], [87.5, 231.0], [87.6, 233.0], [87.7, 233.0], [87.8, 233.0], [87.9, 233.0], [88.0, 234.0], [88.1, 237.0], [88.2, 238.0], [88.3, 240.0], [88.4, 240.0], [88.5, 241.0], [88.6, 245.0], [88.7, 254.0], [88.8, 254.0], [88.9, 259.0], [89.0, 259.0], [89.1, 260.0], [89.2, 261.0], [89.3, 261.0], [89.4, 261.0], [89.5, 262.0], [89.6, 264.0], [89.7, 264.0], [89.8, 265.0], [89.9, 265.0], [90.0, 266.0], [90.1, 266.0], [90.2, 268.0], [90.3, 269.0], [90.4, 271.0], [90.5, 272.0], [90.6, 272.0], [90.7, 274.0], [90.8, 274.0], [90.9, 277.0], [91.0, 278.0], [91.1, 278.0], [91.2, 278.0], [91.3, 279.0], [91.4, 280.0], [91.5, 281.0], [91.6, 282.0], [91.7, 282.0], [91.8, 283.0], [91.9, 283.0], [92.0, 286.0], [92.1, 288.0], [92.2, 294.0], [92.3, 294.0], [92.4, 301.0], [92.5, 317.0], [92.6, 324.0], [92.7, 325.0], [92.8, 329.0], [92.9, 331.0], [93.0, 352.0], [93.1, 352.0], [93.2, 352.0], [93.3, 356.0], [93.4, 358.0], [93.5, 362.0], [93.6, 377.0], [93.7, 378.0], [93.8, 378.0], [93.9, 379.0], [94.0, 380.0], [94.1, 382.0], [94.2, 389.0], [94.3, 389.0], [94.4, 393.0], [94.5, 395.0], [94.6, 398.0], [94.7, 398.0], [94.8, 401.0], [94.9, 402.0], [95.0, 404.0], [95.1, 406.0], [95.2, 406.0], [95.3, 409.0], [95.4, 410.0], [95.5, 411.0], [95.6, 412.0], [95.7, 412.0], [95.8, 413.0], [95.9, 415.0], [96.0, 417.0], [96.1, 419.0], [96.2, 420.0], [96.3, 420.0], [96.4, 423.0], [96.5, 423.0], [96.6, 427.0], [96.7, 428.0], [96.8, 432.0], [96.9, 435.0], [97.0, 437.0], [97.1, 438.0], [97.2, 442.0], [97.3, 443.0], [97.4, 444.0], [97.5, 444.0], [97.6, 447.0], [97.7, 451.0], [97.8, 453.0], [97.9, 454.0], [98.0, 454.0], [98.1, 458.0], [98.2, 476.0], [98.3, 484.0], [98.4, 498.0], [98.5, 498.0], [98.6, 526.0], [98.7, 526.0], [98.8, 530.0], [98.9, 533.0], [99.0, 535.0], [99.1, 536.0], [99.2, 552.0], [99.3, 648.0], [99.4, 684.0], [99.5, 685.0], [99.6, 698.0], [99.7, 791.0], [99.8, 942.0], [99.9, 992.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 648.0, "series": [{"data": [[0.0, 34.0], [100.0, 89.0], [200.0, 33.0], [300.0, 15.0], [400.0, 5.0], [500.0, 10.0], [600.0, 15.0], [700.0, 11.0], [800.0, 13.0], [900.0, 15.0], [1000.0, 5.0], [1100.0, 1.0], [1200.0, 3.0], [1400.0, 1.0], [1600.0, 3.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 6.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 4.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 5.0], [2700.0, 4.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 3.0], [3300.0, 6.0], [3200.0, 4.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 10.0], [3600.0, 4.0], [3800.0, 2.0], [3900.0, 14.0], [4000.0, 8.0], [4100.0, 18.0], [4200.0, 1.0], [4500.0, 3.0], [4700.0, 1.0], [4800.0, 2.0], [4900.0, 5.0], [5000.0, 2.0], [5200.0, 3.0], [5300.0, 2.0], [5600.0, 12.0], [5400.0, 3.0], [5500.0, 2.0], [5800.0, 3.0], [5700.0, 7.0], [6000.0, 2.0], [6100.0, 3.0], [5900.0, 1.0], [6300.0, 12.0], [6200.0, 5.0], [6400.0, 10.0], [6500.0, 2.0], [6600.0, 7.0], [6700.0, 4.0], [6800.0, 7.0], [6900.0, 4.0], [7000.0, 3.0], [7200.0, 5.0], [7400.0, 12.0], [7300.0, 6.0], [7600.0, 2.0], [7800.0, 2.0], [7700.0, 2.0], [7900.0, 4.0], [8100.0, 2.0], [8000.0, 2.0], [8200.0, 13.0], [8700.0, 3.0], [8600.0, 3.0], [8300.0, 4.0], [8500.0, 6.0], [8400.0, 1.0], [8800.0, 6.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 2.0], [9200.0, 1.0], [9700.0, 3.0], [9400.0, 1.0], [9500.0, 1.0], [9600.0, 2.0], [9800.0, 5.0], [9900.0, 9.0], [10000.0, 17.0], [10200.0, 2.0], [10100.0, 2.0], [10700.0, 2.0], [10800.0, 4.0], [11000.0, 3.0], [11100.0, 1.0], [11200.0, 9.0], [11300.0, 3.0], [11400.0, 3.0], [11500.0, 5.0], [11600.0, 18.0], [11700.0, 13.0], [11800.0, 7.0], [12000.0, 9.0], [12100.0, 14.0], [11900.0, 6.0], [12200.0, 10.0], [12300.0, 15.0], [12400.0, 12.0], [12500.0, 22.0], [12600.0, 35.0], [12700.0, 20.0], [12800.0, 24.0], [12900.0, 5.0], [13000.0, 20.0], [13100.0, 16.0], [13200.0, 7.0], [13300.0, 2.0], [13600.0, 7.0], [13400.0, 6.0], [13500.0, 5.0], [13700.0, 2.0], [13800.0, 2.0], [13900.0, 4.0], [14000.0, 3.0], [14100.0, 4.0], [14300.0, 4.0], [14200.0, 4.0], [14500.0, 3.0], [14400.0, 4.0], [14600.0, 7.0], [14700.0, 5.0], [14800.0, 1.0], [15100.0, 8.0], [15000.0, 4.0], [15200.0, 9.0], [15300.0, 2.0], [14900.0, 1.0], [15800.0, 1.0], [15600.0, 7.0], [15500.0, 2.0], [15400.0, 4.0], [15700.0, 2.0], [16100.0, 1.0], [16200.0, 5.0], [16000.0, 2.0], [16300.0, 1.0], [16600.0, 1.0], [16700.0, 2.0], [16800.0, 1.0], [16900.0, 1.0], [17400.0, 3.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 648.0], [300.0, 24.0], [600.0, 4.0], [700.0, 1.0], [100.0, 207.0], [200.0, 69.0], [400.0, 38.0], [900.0, 2.0], [500.0, 7.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1162.0, "series": [{"data": [[0.0, 1162.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 88.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 700.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 50.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 467.705, "minX": 1.71171228E12, "maxY": 467.705, "series": [{"data": [[1.71171228E12, 467.705]], "isOverall": false, "label": "MyfirstTestPlanThreadCount1000", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71171228E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 16683.0, "series": [{"data": [[14.0, 4158.333333333333], [16.0, 4134.0], [17.0, 6066.333333333334], [34.0, 14722.0], [41.0, 5409.0], [40.0, 4802.666666666667], [43.0, 3952.6666666666665], [42.0, 3966.0], [45.0, 3994.0], [49.0, 3989.0], [52.0, 3662.5], [61.0, 9697.0], [72.0, 14982.5], [79.0, 14649.0], [76.0, 14834.0], [83.0, 16112.2], [82.0, 16467.0], [81.0, 15915.0], [80.0, 14665.319999999998], [87.0, 13530.0], [84.0, 13130.0], [91.0, 16683.0], [90.0, 13373.0], [89.0, 14804.5], [95.0, 12880.5], [92.0, 12806.0], [103.0, 12871.0], [111.0, 13133.30769230769], [112.0, 14402.0], [123.0, 13627.222222222223], [121.0, 13330.5], [139.0, 12662.0], [151.0, 12236.176470588236], [203.0, 11610.5], [201.0, 12000.513513513515], [200.0, 7200.0], [209.0, 11519.0], [220.0, 13797.499999999998], [218.0, 13427.0], [217.0, 11304.0], [230.0, 13066.0], [228.0, 15256.0], [227.0, 14075.0], [226.0, 14032.4], [239.0, 15252.0], [233.0, 13595.0], [247.0, 12995.0], [253.0, 1915.0], [249.0, 4593.0], [248.0, 1902.0], [264.0, 1902.0], [257.0, 14078.0], [313.0, 15139.0], [335.0, 4779.5], [334.0, 7904.0], [329.0, 11349.117647058822], [328.0, 12120.0], [326.0, 12691.0], [324.0, 12916.25], [322.0, 12635.0], [321.0, 12807.8], [350.0, 6266.25], [348.0, 4558.5], [347.0, 3072.3333333333335], [346.0, 7781.0], [344.0, 8582.0], [342.0, 573.0], [340.0, 591.5], [338.0, 12661.0], [337.0, 641.0], [381.0, 5780.0], [380.0, 6477.5], [378.0, 4043.0], [377.0, 6472.0], [387.0, 14673.0], [384.0, 14677.5], [415.0, 6421.0], [412.0, 6340.0], [403.0, 3492.5], [419.0, 4867.7692307692305], [430.0, 229.0], [429.0, 376.0], [425.0, 8144.0], [424.0, 12267.84], [423.0, 5826.666666666666], [422.0, 4210.666666666667], [421.0, 6302.0], [420.0, 5654.0], [418.0, 6396.666666666667], [417.0, 3499.5], [446.0, 141.0], [445.0, 138.0], [440.0, 4316.666666666666], [437.0, 6441.749999999999], [436.0, 123.0], [432.0, 8635.833333333332], [461.0, 6409.999999999999], [463.0, 12310.5], [460.0, 138.5], [459.0, 215.0], [458.0, 12728.0], [453.0, 184.0], [452.0, 12740.5], [450.0, 12701.5], [449.0, 8527.333333333332], [479.0, 11805.0], [478.0, 11799.0], [477.0, 11811.0], [474.0, 7159.142857142857], [472.0, 176.0], [468.0, 200.0], [492.0, 6246.5], [491.0, 8325.666666666666], [489.0, 105.0], [486.0, 6120.5], [509.0, 230.0], [504.0, 243.0], [542.0, 6493.666666666667], [543.0, 12819.0], [541.0, 6668.5], [538.0, 2375.0], [537.0, 12865.0], [536.0, 134.0], [526.0, 6024.25], [517.0, 226.0], [514.0, 224.0], [519.0, 10134.727272727272], [518.0, 6284.0], [523.0, 13073.0], [521.0, 13072.0], [520.0, 5096.0], [531.0, 131.0], [530.0, 1192.0], [529.0, 667.0], [563.0, 12582.0], [574.0, 5209.2], [565.0, 6278.8], [569.0, 9440.25], [575.0, 977.0], [561.0, 266.0], [560.0, 174.0], [571.0, 1969.0], [568.0, 7647.800000000001], [547.0, 6948.5], [545.0, 2283.0], [556.0, 201.0], [554.0, 8545.333333333334], [553.0, 144.0], [552.0, 12675.0], [566.0, 1894.0], [564.0, 250.0], [596.0, 7676.545454545455], [582.0, 2632.5], [581.0, 6215.75], [580.0, 7538.499999999999], [578.0, 4757.25], [577.0, 182.0], [603.0, 2503.0], [583.0, 12163.0], [599.0, 6404.666666666667], [598.0, 8902.375], [597.0, 326.5], [595.0, 1295.3333333333335], [594.0, 134.0], [591.0, 235.0], [589.0, 320.0], [590.0, 157.5], [588.0, 321.0], [636.0, 11468.0], [639.0, 4409.5], [635.0, 106.0], [633.0, 7386.833333333334], [632.0, 114.0], [615.0, 148.5], [612.0, 5477.0], [611.0, 7350.25], [610.0, 166.0], [609.0, 7983.333333333334], [608.0, 251.0], [623.0, 81.0], [622.0, 11615.0], [621.0, 3926.333333333333], [619.0, 3249.0], [616.0, 7406.5], [629.0, 121.0], [628.0, 120.0], [626.0, 11575.0], [624.0, 2764.5], [660.0, 1641.0], [656.0, 1432.5], [670.0, 1582.5], [669.0, 8819.0], [666.0, 5821.0], [650.0, 5609.5], [646.0, 7155.0], [645.0, 7110.5], [644.0, 111.5], [648.0, 4468.333333333333], [663.0, 6817.714285714286], [662.0, 2144.0], [661.0, 2200.5], [657.0, 6433.5], [700.0, 4489.0], [678.0, 4791.0], [677.0, 3705.8], [673.0, 91.0], [675.0, 3250.0], [674.0, 99.0], [672.0, 4404.714285714286], [687.0, 9794.0], [686.0, 9850.0], [681.0, 156.0], [682.0, 3423.3333333333335], [703.0, 4559.5], [688.0, 2539.75], [691.0, 135.5], [690.0, 2514.5], [695.0, 180.0], [694.0, 9640.0], [702.0, 2195.6], [701.0, 5968.0], [697.0, 6699.4], [696.0, 180.0], [732.0, 1190.0], [706.0, 3121.0], [709.0, 4983.0], [711.0, 789.3333333333334], [710.0, 9002.0], [705.0, 1982.0], [719.0, 678.0], [715.0, 682.25], [735.0, 3755.5], [730.0, 3466.0], [734.0, 6652.0], [731.0, 206.0], [723.0, 310.0], [720.0, 516.0], [764.0, 277.0], [767.0, 6609.0], [762.0, 2506.4], [761.0, 8304.0], [763.0, 8701.0], [743.0, 4263.0], [741.0, 5127.0], [742.0, 6994.636363636363], [738.0, 3727.0], [737.0, 5179.5], [736.0, 8402.0], [759.0, 5958.0], [758.0, 7900.0], [755.0, 4155.25], [754.0, 1624.6666666666665], [753.0, 6797.5], [752.0, 5220.0], [751.0, 7786.0], [750.0, 680.0], [749.0, 8761.0], [747.0, 4732.25], [744.0, 977.0], [794.0, 6876.0], [773.0, 3545.666666666667], [772.0, 4181.0], [771.0, 3548.0], [769.0, 394.0], [768.0, 794.0], [797.0, 5910.857142857143], [796.0, 5969.166666666667], [795.0, 7247.0], [775.0, 8005.260869565217], [774.0, 4377.5], [812.0, 786.5], [810.0, 4369.058823529411], [803.0, 3205.666666666667], [802.0, 973.6666666666666], [801.0, 992.0], [800.0, 6908.666666666667], [814.0, 6834.5], [811.0, 855.0], [809.0, 868.0], [808.0, 910.0], [807.0, 924.5], [805.0, 958.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[473.21400000000057, 7460.382999999998]], "isOverall": false, "label": "ProductSearch-Aggregated", "isController": false}, {"data": [[4.0, 36.0], [6.0, 25.5], [9.0, 23.666666666666668], [11.0, 25.0], [13.0, 27.0], [14.0, 16.0], [16.0, 45.5], [17.0, 44.0], [18.0, 106.0], [19.0, 69.0], [20.0, 72.0], [21.0, 73.0], [23.0, 72.5], [24.0, 61.0], [26.0, 61.5], [27.0, 58.0], [29.0, 60.5], [31.0, 54.0], [32.0, 533.0], [34.0, 21.0], [37.0, 525.0], [36.0, 17.0], [39.0, 248.5], [41.0, 16.0], [40.0, 498.0], [43.0, 443.0], [42.0, 21.0], [45.0, 451.0], [44.0, 16.0], [47.0, 417.0], [46.0, 420.0], [49.0, 423.0], [48.0, 423.0], [51.0, 407.0], [53.0, 406.0], [52.0, 411.0], [55.0, 410.0], [54.0, 398.0], [56.0, 95.0], [58.0, 377.0], [61.0, 100.0], [60.0, 82.5], [62.0, 424.0], [67.0, 195.66666666666666], [65.0, 791.0], [64.0, 185.0], [71.0, 222.5], [69.0, 226.0], [68.0, 233.0], [75.0, 171.0], [74.0, 174.0], [73.0, 169.0], [72.0, 223.0], [79.0, 169.0], [78.0, 168.0], [77.0, 165.0], [76.0, 168.0], [83.0, 56.0], [82.0, 143.0], [81.0, 76.0], [80.0, 96.0], [87.0, 15.0], [86.0, 18.0], [85.0, 16.0], [84.0, 62.0], [91.0, 15.0], [90.0, 13.0], [89.0, 20.5], [95.0, 14.0], [94.0, 14.0], [93.0, 17.0], [92.0, 17.0], [99.0, 37.0], [97.0, 13.0], [96.0, 18.0], [103.0, 36.333333333333336], [101.0, 37.0], [107.0, 32.5], [105.0, 35.5], [111.0, 16.0], [110.0, 14.0], [109.0, 16.0], [108.0, 26.0], [115.0, 69.0], [114.0, 71.0], [113.0, 149.0], [112.0, 207.0], [119.0, 79.0], [118.0, 124.5], [116.0, 142.0], [123.0, 106.0], [122.0, 217.0], [121.0, 415.0], [120.0, 143.0], [127.0, 27.0], [126.0, 29.0], [125.0, 28.0], [124.0, 28.0], [135.0, 19.0], [134.0, 187.0], [133.0, 184.0], [132.0, 23.0], [131.0, 30.0], [130.0, 24.0], [129.0, 24.0], [128.0, 23.0], [143.0, 96.0], [141.0, 103.0], [140.0, 30.0], [139.0, 19.0], [138.0, 182.0], [137.0, 21.0], [136.0, 18.0], [151.0, 107.0], [150.0, 109.0], [149.0, 152.5], [148.0, 92.0], [147.0, 92.0], [146.0, 94.0], [145.0, 96.0], [144.0, 96.0], [158.0, 40.0], [157.0, 42.0], [164.0, 46.666666666666664], [162.0, 44.5], [160.0, 42.333333333333336], [175.0, 60.0], [174.0, 183.33333333333331], [172.0, 249.0], [170.0, 308.66666666666663], [168.0, 188.0], [183.0, 47.0], [182.0, 46.0], [181.0, 48.0], [180.0, 46.0], [179.0, 45.0], [178.0, 42.0], [177.0, 51.0], [176.0, 46.0], [191.0, 53.0], [190.0, 46.0], [188.0, 444.0], [187.0, 51.0], [186.0, 59.0], [185.0, 45.0], [184.0, 46.0], [199.0, 53.5], [197.0, 445.5], [196.0, 442.0], [194.0, 51.333333333333336], [192.0, 49.0], [207.0, 230.5], [205.0, 217.0], [204.0, 223.0], [203.0, 87.0], [202.0, 526.0], [201.0, 56.0], [200.0, 59.0], [215.0, 435.0], [214.0, 238.0], [213.0, 432.0], [212.0, 234.0], [211.0, 233.0], [210.0, 240.0], [209.0, 231.0], [208.0, 231.0], [222.0, 95.0], [221.0, 99.0], [220.0, 88.0], [219.0, 91.0], [218.0, 254.0], [217.0, 437.0], [216.0, 228.0], [231.0, 165.0], [230.0, 36.0], [229.0, 37.0], [228.0, 17.0], [227.0, 80.0], [226.0, 61.0], [225.0, 141.5], [224.0, 107.0], [237.0, 15.0], [236.0, 19.0], [247.0, 32.0], [246.0, 26.0], [245.0, 29.0], [244.0, 27.0], [243.0, 27.5], [241.0, 282.0], [240.0, 286.0], [255.0, 104.5], [253.0, 104.5], [251.0, 106.0], [249.0, 28.0], [248.0, 39.0], [259.0, 123.0], [270.0, 133.33333333333334], [268.0, 131.0], [266.0, 128.0], [264.0, 119.0], [263.0, 116.0], [262.0, 116.0], [261.0, 116.0], [260.0, 116.0], [258.0, 119.0], [257.0, 127.0], [256.0, 115.0], [286.0, 146.0], [287.0, 147.0], [285.0, 152.0], [284.0, 152.0], [283.0, 159.0], [282.0, 151.0], [281.0, 151.0], [280.0, 139.0], [279.0, 142.0], [272.0, 137.33333333333334], [275.0, 130.0], [274.0, 135.0], [278.0, 155.0], [277.0, 133.0], [276.0, 132.0], [302.0, 130.0], [303.0, 147.0], [301.0, 151.0], [300.0, 137.0], [299.0, 139.0], [298.0, 130.0], [297.0, 132.0], [296.0, 133.0], [295.0, 151.0], [288.0, 153.0], [291.0, 144.0], [289.0, 140.0], [294.0, 142.0], [292.0, 144.0], [318.0, 135.0], [319.0, 135.0], [317.0, 133.5], [315.0, 134.5], [314.0, 132.0], [313.0, 137.0], [311.0, 134.5], [309.0, 131.33333333333334], [307.0, 133.0], [305.0, 129.0], [334.0, 535.0], [335.0, 77.0], [333.0, 526.0], [332.0, 530.0], [331.0, 536.0], [330.0, 476.0], [329.0, 101.0], [328.0, 108.0], [327.0, 106.0], [321.0, 134.0], [320.0, 135.0], [323.0, 126.0], [322.0, 142.0], [326.0, 110.0], [325.0, 110.0], [324.0, 117.0], [350.0, 33.0], [351.0, 259.0], [349.0, 34.0], [348.0, 28.0], [347.0, 18.0], [346.0, 24.0], [344.0, 19.0], [343.0, 19.0], [337.0, 57.0], [336.0, 60.0], [339.0, 32.0], [338.0, 33.0], [342.0, 23.0], [341.0, 30.0], [340.0, 31.0], [355.0, 265.0], [366.0, 262.0], [367.0, 261.0], [365.0, 264.5], [363.0, 265.0], [361.0, 263.6666666666667], [358.0, 261.0], [356.0, 269.0], [354.0, 274.0], [353.0, 272.0], [352.0, 254.0], [382.0, 60.0], [383.0, 59.0], [381.0, 30.0], [380.0, 30.0], [379.0, 32.0], [378.0, 237.0], [377.0, 18.0], [376.0, 17.0], [375.0, 174.0], [368.0, 162.0], [371.0, 161.0], [369.0, 160.0], [374.0, 17.0], [373.0, 30.0], [372.0, 164.0], [398.0, 159.0], [399.0, 153.0], [397.0, 155.0], [396.0, 147.0], [395.0, 146.0], [394.0, 147.0], [393.0, 145.0], [392.0, 156.0], [391.0, 156.0], [384.0, 112.0], [387.0, 113.0], [386.0, 115.5], [390.0, 148.0], [389.0, 166.0], [388.0, 127.0], [414.0, 145.0], [415.0, 143.0], [412.0, 141.0], [403.0, 143.0], [402.0, 144.0], [401.0, 149.0], [400.0, 145.0], [411.0, 140.0], [410.0, 141.0], [409.0, 147.0], [408.0, 143.0], [407.0, 142.0], [406.0, 154.0], [405.0, 142.0], [404.0, 140.0], [430.0, 129.0], [431.0, 117.0], [429.0, 245.0], [428.0, 294.0], [427.0, 294.0], [426.0, 271.0], [425.0, 157.0], [424.0, 70.0], [423.0, 79.0], [417.0, 144.5], [419.0, 124.0], [418.0, 144.0], [422.0, 110.0], [421.0, 121.0], [420.0, 122.0], [446.0, 43.0], [447.0, 37.0], [445.0, 22.0], [444.0, 26.0], [443.0, 26.0], [442.0, 19.0], [441.0, 19.0], [440.0, 44.0], [439.0, 45.0], [433.0, 43.0], [432.0, 119.0], [435.0, 45.0], [434.0, 50.0], [438.0, 45.0], [437.0, 40.0], [436.0, 39.0], [462.0, 61.0], [463.0, 32.0], [461.0, 33.0], [460.0, 37.0], [459.0, 54.0], [458.0, 59.0], [457.0, 45.0], [456.0, 44.0], [455.0, 46.0], [448.0, 38.0], [450.0, 17.0], [449.0, 30.0], [454.0, 41.0], [453.0, 56.0], [452.0, 28.5], [467.0, 62.0], [473.0, 50.0], [474.0, 34.0], [472.0, 52.0], [471.0, 43.0], [470.0, 64.0], [469.0, 65.0], [468.0, 72.0], [466.0, 65.0], [465.0, 71.0], [464.0, 48.0], [493.0, 18.0], [494.0, 15.0], [492.0, 17.0], [481.0, 24.0], [491.0, 42.0], [490.0, 40.0], [489.0, 48.0], [488.0, 52.0], [487.0, 38.0], [486.0, 63.63636363636363], [510.0, 28.0], [511.0, 46.0], [509.0, 30.0], [508.0, 31.0], [507.0, 30.0], [506.0, 33.0], [505.0, 36.0], [504.0, 38.0], [503.0, 36.5], [498.0, 40.0], [497.0, 30.0], [502.0, 39.0], [500.0, 46.0], [537.0, 13.0], [542.0, 37.0], [543.0, 52.0], [529.0, 16.0], [528.0, 18.0], [531.0, 28.0], [530.0, 31.0], [533.0, 27.0], [532.0, 22.0], [541.0, 25.0], [539.0, 20.0], [538.0, 21.0], [536.0, 19.0], [519.0, 21.0], [518.0, 33.0], [517.0, 39.0], [516.0, 36.0], [515.0, 32.0], [514.0, 38.0], [512.0, 37.0], [527.0, 21.0], [526.0, 67.0], [525.0, 67.0], [524.0, 73.0], [523.0, 145.0], [522.0, 101.0], [521.0, 62.0], [520.0, 41.0], [535.0, 23.0], [534.0, 31.0], [572.0, 55.0], [575.0, 30.0], [560.0, 46.0], [563.0, 17.666666666666668], [562.0, 56.0], [561.0, 32.5], [565.0, 21.5], [564.0, 16.0], [574.0, 61.0], [573.0, 53.0], [571.0, 49.5], [570.0, 116.0], [569.0, 49.0], [568.0, 32.0], [559.0, 53.0], [545.0, 55.0], [544.0, 70.0], [547.0, 28.0], [546.0, 36.0], [549.0, 21.0], [548.0, 398.0], [551.0, 28.0], [550.0, 39.0], [558.0, 52.0], [557.0, 53.0], [556.0, 46.0], [555.0, 25.0], [554.0, 21.0], [553.0, 33.0], [552.0, 33.0], [567.0, 29.0], [566.0, 25.5], [604.0, 110.0], [582.0, 29.666666666666668], [583.0, 23.0], [601.0, 117.0], [600.0, 71.0], [581.0, 52.666666666666664], [580.0, 67.4], [579.0, 37.0], [578.0, 46.666666666666664], [577.0, 46.0], [576.0, 40.0], [591.0, 46.0], [590.0, 44.25], [589.0, 66.0], [588.0, 50.0], [587.0, 24.666666666666668], [585.0, 33.5], [584.0, 97.0], [607.0, 113.0], [592.0, 47.0], [593.0, 28.0], [595.0, 50.0], [594.0, 57.333333333333336], [597.0, 45.5], [596.0, 46.0], [599.0, 96.0], [598.0, 83.0], [606.0, 113.0], [605.0, 116.0], [603.0, 118.0], [602.0, 114.0], [636.0, 65.0], [639.0, 19.0], [625.0, 39.0], [624.0, 31.0], [627.0, 18.0], [626.0, 29.0], [629.0, 25.0], [628.0, 26.0], [638.0, 16.0], [637.0, 19.0], [635.0, 23.0], [634.0, 23.0], [633.0, 16.0], [632.0, 20.0], [623.0, 18.0], [609.0, 105.0], [608.0, 129.0], [611.0, 54.0], [610.0, 78.0], [613.0, 17.0], [612.0, 53.0], [615.0, 49.0], [614.0, 49.0], [622.0, 18.0], [621.0, 28.0], [620.0, 23.0], [619.0, 24.5], [617.0, 44.0], [616.0, 50.0], [631.0, 28.0], [630.0, 27.0], [668.0, 29.0], [671.0, 63.5], [657.0, 33.0], [656.0, 37.0], [659.0, 105.0], [658.0, 48.0], [661.0, 46.0], [660.0, 46.5], [670.0, 56.0], [669.0, 26.0], [667.0, 37.5], [666.0, 30.5], [665.0, 111.66666666666667], [664.0, 51.33333333333333], [655.0, 42.0], [640.0, 42.0], [642.0, 15.0], [641.0, 15.0], [645.0, 31.0], [644.0, 30.5], [647.0, 46.0], [646.0, 32.0], [653.0, 16.0], [652.0, 16.0], [651.0, 21.0], [650.0, 32.0], [649.0, 26.0], [648.0, 34.0], [663.0, 244.33333333333331], [662.0, 59.5], [700.0, 111.5], [677.0, 31.0], [678.0, 25.0], [679.0, 20.5], [697.0, 145.5], [696.0, 37.0], [699.0, 149.0], [698.0, 107.33333333333334], [676.0, 27.5], [675.0, 29.0], [674.0, 58.666666666666664], [673.0, 94.16666666666666], [687.0, 48.0], [686.0, 33.0], [685.0, 34.0], [684.0, 40.0], [683.0, 37.0], [682.0, 37.0], [681.0, 34.0], [680.0, 18.0], [703.0, 78.5], [689.0, 31.333333333333336], [688.0, 45.0], [691.0, 39.0], [690.0, 50.0], [693.0, 18.0], [692.0, 16.0], [695.0, 35.0], [694.0, 25.5], [702.0, 209.5], [701.0, 55.0], [732.0, 24.5], [709.0, 25.0], [708.0, 30.0], [710.0, 65.0], [728.0, 490.0], [711.0, 58.0], [707.0, 27.0], [706.0, 31.333333333333332], [705.0, 39.0], [719.0, 45.0], [704.0, 26.0], [718.0, 48.0], [715.0, 21.0], [714.0, 24.0], [713.0, 19.0], [712.0, 31.5], [735.0, 248.33333333333331], [721.0, 48.0], [720.0, 22.0], [723.0, 18.0], [722.0, 48.0], [725.0, 25.0], [724.0, 28.0], [727.0, 521.0], [726.0, 26.0], [734.0, 27.4], [733.0, 165.2], [730.0, 30.5], [731.0, 37.0], [729.0, 27.0], [764.0, 33.5], [767.0, 43.0], [753.0, 58.25], [752.0, 60.5], [755.0, 65.75], [754.0, 66.66666666666667], [757.0, 61.4], [756.0, 56.0], [766.0, 33.5], [765.0, 33.5], [763.0, 34.5], [762.0, 43.0], [761.0, 44.0], [760.0, 37.0], [751.0, 66.75], [737.0, 32.0], [736.0, 184.5], [739.0, 24.0], [738.0, 28.0], [741.0, 37.0], [740.0, 24.5], [743.0, 36.0], [742.0, 28.0], [750.0, 33.5], [749.0, 56.0], [748.0, 65.33333333333333], [747.0, 35.333333333333336], [746.0, 50.5], [745.0, 51.5], [744.0, 58.5], [759.0, 48.0], [758.0, 64.66666666666667], [772.0, 22.0], [773.0, 36.333333333333336], [775.0, 30.0], [774.0, 40.5], [794.0, 389.0], [792.0, 355.0], [771.0, 32.0], [770.0, 31.0], [769.0, 20.0], [768.0, 17.0], [783.0, 216.0], [782.0, 221.0], [780.0, 219.0], [779.0, 196.0], [778.0, 106.0], [777.0, 103.0], [776.0, 79.0], [799.0, 321.3333333333333], [790.0, 352.0], [789.0, 329.0], [788.0, 324.0], [787.0, 317.0], [786.0, 282.0], [785.0, 288.0], [784.0, 266.0], [798.0, 413.0], [797.0, 294.5], [796.0, 315.0], [795.0, 137.0], [804.0, 298.0], [810.0, 275.3333333333333], [811.0, 340.5], [813.0, 279.0], [812.0, 290.5], [801.0, 323.6666666666667], [800.0, 406.0], [814.0, 283.0], [809.0, 278.0], [808.0, 299.5], [807.0, 315.0], [806.0, 286.0], [805.0, 297.0], [803.0, 305.5], [802.0, 343.0], [1.0, 37.0]], "isOverall": false, "label": "GetUser", "isController": false}, {"data": [[462.19599999999986, 105.56899999999996]], "isOverall": false, "label": "GetUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 814.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4030.8333333333335, "minX": 1.71171228E12, "maxY": 51934.166666666664, "series": [{"data": [[1.71171228E12, 51934.166666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71171228E12, 4030.8333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71171228E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 105.56899999999996, "minX": 1.71171228E12, "maxY": 7460.382999999998, "series": [{"data": [[1.71171228E12, 7460.382999999998]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71171228E12, 105.56899999999996]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71171228E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.52900000000002, "minX": 1.71171228E12, "maxY": 6663.192999999997, "series": [{"data": [[1.71171228E12, 6663.192999999997]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71171228E12, 105.52900000000002]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71171228E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.041000000000006, "minX": 1.71171228E12, "maxY": 7376.816000000004, "series": [{"data": [[1.71171228E12, 7376.816000000004]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.71171228E12, 14.041000000000006]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71171228E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.71171228E12, "maxY": 15137.0, "series": [{"data": [[1.71171228E12, 15137.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71171228E12, 12606.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71171228E12, 14620.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71171228E12, 13072.45]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71171228E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71171228E12, 196.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71171228E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 73.5, "minX": 36.0, "maxY": 15644.0, "series": [{"data": [[130.0, 115.0], [143.0, 103.0], [36.0, 156.0], [152.0, 792.5], [159.0, 517.0], [175.0, 196.0], [176.0, 77.5], [178.0, 8571.0], [208.0, 73.5], [62.0, 161.0], [251.0, 155.0], [104.0, 182.0], [111.0, 410.0], [115.0, 103.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[175.0, 15450.0], [178.0, 15578.0], [251.0, 15644.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 251.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 36.0, "maxY": 8571.0, "series": [{"data": [[130.0, 115.0], [143.0, 103.0], [36.0, 156.0], [152.0, 792.0], [159.0, 517.0], [175.0, 196.0], [176.0, 77.5], [178.0, 8571.0], [208.0, 73.5], [62.0, 161.0], [251.0, 155.0], [104.0, 182.0], [111.0, 410.0], [115.0, 103.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[175.0, 0.0], [178.0, 0.0], [251.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 251.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.71171228E12, "maxY": 33.333333333333336, "series": [{"data": [[1.71171228E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71171228E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71171228E12, "maxY": 32.5, "series": [{"data": [[1.71171228E12, 32.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71171228E12, 0.8333333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71171228E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71171228E12, "maxY": 16.666666666666668, "series": [{"data": [[1.71171228E12, 16.666666666666668]], "isOverall": false, "label": "GetUser-success", "isController": false}, {"data": [[1.71171228E12, 15.833333333333334]], "isOverall": false, "label": "ProductSearch-success", "isController": false}, {"data": [[1.71171228E12, 0.8333333333333334]], "isOverall": false, "label": "ProductSearch-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71171228E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71171228E12, "maxY": 32.5, "series": [{"data": [[1.71171228E12, 32.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71171228E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71171228E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

