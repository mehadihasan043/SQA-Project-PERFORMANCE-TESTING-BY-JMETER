/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 12781.0, "series": [{"data": [[0.0, 62.0], [0.1, 62.0], [0.2, 63.0], [0.3, 66.0], [0.4, 67.0], [0.5, 68.0], [0.6, 68.0], [0.7, 71.0], [0.8, 72.0], [0.9, 72.0], [1.0, 74.0], [1.1, 74.0], [1.2, 77.0], [1.3, 77.0], [1.4, 79.0], [1.5, 80.0], [1.6, 80.0], [1.7, 81.0], [1.8, 82.0], [1.9, 82.0], [2.0, 83.0], [2.1, 83.0], [2.2, 84.0], [2.3, 85.0], [2.4, 85.0], [2.5, 85.0], [2.6, 85.0], [2.7, 85.0], [2.8, 85.0], [2.9, 86.0], [3.0, 86.0], [3.1, 86.0], [3.2, 87.0], [3.3, 87.0], [3.4, 87.0], [3.5, 88.0], [3.6, 88.0], [3.7, 88.0], [3.8, 88.0], [3.9, 88.0], [4.0, 88.0], [4.1, 88.0], [4.2, 88.0], [4.3, 89.0], [4.4, 89.0], [4.5, 89.0], [4.6, 89.0], [4.7, 89.0], [4.8, 89.0], [4.9, 90.0], [5.0, 90.0], [5.1, 90.0], [5.2, 90.0], [5.3, 90.0], [5.4, 90.0], [5.5, 91.0], [5.6, 91.0], [5.7, 93.0], [5.8, 94.0], [5.9, 94.0], [6.0, 94.0], [6.1, 94.0], [6.2, 94.0], [6.3, 95.0], [6.4, 95.0], [6.5, 96.0], [6.6, 96.0], [6.7, 98.0], [6.8, 98.0], [6.9, 98.0], [7.0, 98.0], [7.1, 98.0], [7.2, 99.0], [7.3, 99.0], [7.4, 99.0], [7.5, 100.0], [7.6, 100.0], [7.7, 100.0], [7.8, 101.0], [7.9, 102.0], [8.0, 102.0], [8.1, 102.0], [8.2, 102.0], [8.3, 103.0], [8.4, 107.0], [8.5, 108.0], [8.6, 108.0], [8.7, 110.0], [8.8, 110.0], [8.9, 111.0], [9.0, 112.0], [9.1, 112.0], [9.2, 113.0], [9.3, 113.0], [9.4, 114.0], [9.5, 115.0], [9.6, 115.0], [9.7, 115.0], [9.8, 115.0], [9.9, 116.0], [10.0, 117.0], [10.1, 117.0], [10.2, 118.0], [10.3, 119.0], [10.4, 119.0], [10.5, 119.0], [10.6, 119.0], [10.7, 120.0], [10.8, 123.0], [10.9, 124.0], [11.0, 124.0], [11.1, 124.0], [11.2, 125.0], [11.3, 126.0], [11.4, 128.0], [11.5, 128.0], [11.6, 128.0], [11.7, 129.0], [11.8, 130.0], [11.9, 130.0], [12.0, 131.0], [12.1, 131.0], [12.2, 131.0], [12.3, 131.0], [12.4, 132.0], [12.5, 133.0], [12.6, 133.0], [12.7, 133.0], [12.8, 134.0], [12.9, 135.0], [13.0, 137.0], [13.1, 137.0], [13.2, 138.0], [13.3, 139.0], [13.4, 141.0], [13.5, 147.0], [13.6, 147.0], [13.7, 148.0], [13.8, 148.0], [13.9, 149.0], [14.0, 150.0], [14.1, 150.0], [14.2, 155.0], [14.3, 157.0], [14.4, 158.0], [14.5, 161.0], [14.6, 161.0], [14.7, 162.0], [14.8, 167.0], [14.9, 172.0], [15.0, 177.0], [15.1, 177.0], [15.2, 180.0], [15.3, 181.0], [15.4, 182.0], [15.5, 189.0], [15.6, 189.0], [15.7, 191.0], [15.8, 191.0], [15.9, 200.0], [16.0, 217.0], [16.1, 217.0], [16.2, 282.0], [16.3, 318.0], [16.4, 341.0], [16.5, 410.0], [16.6, 410.0], [16.7, 455.0], [16.8, 493.0], [16.9, 523.0], [17.0, 545.0], [17.1, 545.0], [17.2, 560.0], [17.3, 649.0], [17.4, 671.0], [17.5, 690.0], [17.6, 690.0], [17.7, 736.0], [17.8, 789.0], [17.9, 794.0], [18.0, 799.0], [18.1, 799.0], [18.2, 800.0], [18.3, 813.0], [18.4, 834.0], [18.5, 835.0], [18.6, 835.0], [18.7, 849.0], [18.8, 867.0], [18.9, 947.0], [19.0, 954.0], [19.1, 954.0], [19.2, 954.0], [19.3, 986.0], [19.4, 1014.0], [19.5, 1076.0], [19.6, 1076.0], [19.7, 1077.0], [19.8, 1103.0], [19.9, 1128.0], [20.0, 1148.0], [20.1, 1148.0], [20.2, 1153.0], [20.3, 1173.0], [20.4, 1179.0], [20.5, 1179.0], [20.6, 1179.0], [20.7, 1204.0], [20.8, 1209.0], [20.9, 1210.0], [21.0, 1211.0], [21.1, 1211.0], [21.2, 1212.0], [21.3, 1213.0], [21.4, 1216.0], [21.5, 1218.0], [21.6, 1218.0], [21.7, 1218.0], [21.8, 1224.0], [21.9, 1227.0], [22.0, 1227.0], [22.1, 1227.0], [22.2, 1232.0], [22.3, 1234.0], [22.4, 1242.0], [22.5, 1249.0], [22.6, 1249.0], [22.7, 1252.0], [22.8, 1255.0], [22.9, 1256.0], [23.0, 1265.0], [23.1, 1265.0], [23.2, 1269.0], [23.3, 1270.0], [23.4, 1270.0], [23.5, 1284.0], [23.6, 1284.0], [23.7, 1288.0], [23.8, 1295.0], [23.9, 1300.0], [24.0, 1304.0], [24.1, 1304.0], [24.2, 1304.0], [24.3, 1309.0], [24.4, 1312.0], [24.5, 1323.0], [24.6, 1323.0], [24.7, 1327.0], [24.8, 1331.0], [24.9, 1332.0], [25.0, 1338.0], [25.1, 1338.0], [25.2, 1347.0], [25.3, 1355.0], [25.4, 1358.0], [25.5, 1366.0], [25.6, 1366.0], [25.7, 1394.0], [25.8, 1396.0], [25.9, 1396.0], [26.0, 1403.0], [26.1, 1403.0], [26.2, 1403.0], [26.3, 1404.0], [26.4, 1406.0], [26.5, 1416.0], [26.6, 1416.0], [26.7, 1434.0], [26.8, 1436.0], [26.9, 1449.0], [27.0, 1450.0], [27.1, 1450.0], [27.2, 1454.0], [27.3, 1464.0], [27.4, 1471.0], [27.5, 1486.0], [27.6, 1486.0], [27.7, 1489.0], [27.8, 1490.0], [27.9, 1495.0], [28.0, 1499.0], [28.1, 1499.0], [28.2, 1501.0], [28.3, 1502.0], [28.4, 1504.0], [28.5, 1508.0], [28.6, 1508.0], [28.7, 1509.0], [28.8, 1516.0], [28.9, 1518.0], [29.0, 1521.0], [29.1, 1521.0], [29.2, 1524.0], [29.3, 1527.0], [29.4, 1537.0], [29.5, 1543.0], [29.6, 1543.0], [29.7, 1545.0], [29.8, 1550.0], [29.9, 1561.0], [30.0, 1567.0], [30.1, 1567.0], [30.2, 1575.0], [30.3, 1580.0], [30.4, 1588.0], [30.5, 1596.0], [30.6, 1596.0], [30.7, 1628.0], [30.8, 1678.0], [30.9, 1685.0], [31.0, 1707.0], [31.1, 1707.0], [31.2, 1728.0], [31.3, 1732.0], [31.4, 1733.0], [31.5, 1771.0], [31.6, 1771.0], [31.7, 1809.0], [31.8, 1811.0], [31.9, 1816.0], [32.0, 1825.0], [32.1, 1825.0], [32.2, 1832.0], [32.3, 1888.0], [32.4, 1890.0], [32.5, 1900.0], [32.6, 1900.0], [32.7, 1939.0], [32.8, 1940.0], [32.9, 1941.0], [33.0, 1995.0], [33.1, 1995.0], [33.2, 2013.0], [33.3, 2046.0], [33.4, 2139.0], [33.5, 2152.0], [33.6, 2152.0], [33.7, 2167.0], [33.8, 2168.0], [33.9, 2183.0], [34.0, 2219.0], [34.1, 2219.0], [34.2, 2233.0], [34.3, 2244.0], [34.4, 2255.0], [34.5, 2260.0], [34.6, 2260.0], [34.7, 2265.0], [34.8, 2269.0], [34.9, 2291.0], [35.0, 2294.0], [35.1, 2294.0], [35.2, 2305.0], [35.3, 2318.0], [35.4, 2331.0], [35.5, 2338.0], [35.6, 2338.0], [35.7, 2345.0], [35.8, 2348.0], [35.9, 2360.0], [36.0, 2365.0], [36.1, 2365.0], [36.2, 2377.0], [36.3, 2390.0], [36.4, 2397.0], [36.5, 2407.0], [36.6, 2407.0], [36.7, 2411.0], [36.8, 2413.0], [36.9, 2413.0], [37.0, 2417.0], [37.1, 2417.0], [37.2, 2418.0], [37.3, 2421.0], [37.4, 2423.0], [37.5, 2429.0], [37.6, 2429.0], [37.7, 2432.0], [37.8, 2433.0], [37.9, 2442.0], [38.0, 2444.0], [38.1, 2444.0], [38.2, 2444.0], [38.3, 2446.0], [38.4, 2452.0], [38.5, 2452.0], [38.6, 2452.0], [38.7, 2454.0], [38.8, 2455.0], [38.9, 2455.0], [39.0, 2468.0], [39.1, 2468.0], [39.2, 2480.0], [39.3, 2482.0], [39.4, 2484.0], [39.5, 2489.0], [39.6, 2489.0], [39.7, 2490.0], [39.8, 2496.0], [39.9, 2506.0], [40.0, 2516.0], [40.1, 2516.0], [40.2, 2520.0], [40.3, 2531.0], [40.4, 2598.0], [40.5, 2630.0], [40.6, 2630.0], [40.7, 2651.0], [40.8, 2673.0], [40.9, 2677.0], [41.0, 2695.0], [41.1, 2695.0], [41.2, 2704.0], [41.3, 2718.0], [41.4, 2720.0], [41.5, 2735.0], [41.6, 2735.0], [41.7, 2742.0], [41.8, 2750.0], [41.9, 2751.0], [42.0, 2762.0], [42.1, 2762.0], [42.2, 2768.0], [42.3, 2769.0], [42.4, 2777.0], [42.5, 2779.0], [42.6, 2779.0], [42.7, 2787.0], [42.8, 2787.0], [42.9, 2787.0], [43.0, 2793.0], [43.1, 2793.0], [43.2, 2793.0], [43.3, 2797.0], [43.4, 2816.0], [43.5, 2820.0], [43.6, 2820.0], [43.7, 2826.0], [43.8, 2831.0], [43.9, 2833.0], [44.0, 2836.0], [44.1, 2836.0], [44.2, 2837.0], [44.3, 2849.0], [44.4, 2861.0], [44.5, 2862.0], [44.6, 2862.0], [44.7, 2865.0], [44.8, 2867.0], [44.9, 2869.0], [45.0, 2889.0], [45.1, 2889.0], [45.2, 2890.0], [45.3, 2891.0], [45.4, 2895.0], [45.5, 2906.0], [45.6, 2906.0], [45.7, 2910.0], [45.8, 2912.0], [45.9, 2913.0], [46.0, 2919.0], [46.1, 2919.0], [46.2, 2926.0], [46.3, 2928.0], [46.4, 2928.0], [46.5, 2932.0], [46.6, 2932.0], [46.7, 2937.0], [46.8, 2941.0], [46.9, 2951.0], [47.0, 2971.0], [47.1, 2971.0], [47.2, 2973.0], [47.3, 2979.0], [47.4, 2988.0], [47.5, 2993.0], [47.6, 2993.0], [47.7, 3003.0], [47.8, 3044.0], [47.9, 3050.0], [48.0, 3055.0], [48.1, 3055.0], [48.2, 3057.0], [48.3, 3084.0], [48.4, 3111.0], [48.5, 3151.0], [48.6, 3151.0], [48.7, 3156.0], [48.8, 3162.0], [48.9, 3179.0], [49.0, 3187.0], [49.1, 3187.0], [49.2, 3197.0], [49.3, 3202.0], [49.4, 3204.0], [49.5, 3214.0], [49.6, 3214.0], [49.7, 3262.0], [49.8, 3271.0], [49.9, 3271.0], [50.0, 3275.0], [50.1, 3275.0], [50.2, 3284.0], [50.3, 3321.0], [50.4, 3338.0], [50.5, 3344.0], [50.6, 3344.0], [50.7, 3360.0], [50.8, 3377.0], [50.9, 3412.0], [51.0, 3435.0], [51.1, 3435.0], [51.2, 3467.0], [51.3, 3471.0], [51.4, 3503.0], [51.5, 3504.0], [51.6, 3504.0], [51.7, 3510.0], [51.8, 3523.0], [51.9, 3534.0], [52.0, 3546.0], [52.1, 3546.0], [52.2, 3557.0], [52.3, 3564.0], [52.4, 3576.0], [52.5, 3655.0], [52.6, 3655.0], [52.7, 3658.0], [52.8, 3695.0], [52.9, 3700.0], [53.0, 3737.0], [53.1, 3737.0], [53.2, 3747.0], [53.3, 3803.0], [53.4, 3855.0], [53.5, 3924.0], [53.6, 3924.0], [53.7, 3934.0], [53.8, 3982.0], [53.9, 4001.0], [54.0, 4033.0], [54.1, 4033.0], [54.2, 4035.0], [54.3, 4038.0], [54.4, 4090.0], [54.5, 4109.0], [54.6, 4109.0], [54.7, 4157.0], [54.8, 4273.0], [54.9, 4284.0], [55.0, 4293.0], [55.1, 4293.0], [55.2, 4349.0], [55.3, 4393.0], [55.4, 4421.0], [55.5, 4495.0], [55.6, 4495.0], [55.7, 4538.0], [55.8, 4550.0], [55.9, 4564.0], [56.0, 4619.0], [56.1, 4619.0], [56.2, 4640.0], [56.3, 4650.0], [56.4, 4656.0], [56.5, 4666.0], [56.6, 4666.0], [56.7, 4710.0], [56.8, 4806.0], [56.9, 4848.0], [57.0, 4879.0], [57.1, 4879.0], [57.2, 4908.0], [57.3, 4960.0], [57.4, 4972.0], [57.5, 4977.0], [57.6, 4977.0], [57.7, 4994.0], [57.8, 4994.0], [57.9, 4995.0], [58.0, 5028.0], [58.1, 5028.0], [58.2, 5061.0], [58.3, 5072.0], [58.4, 5077.0], [58.5, 5079.0], [58.6, 5079.0], [58.7, 5095.0], [58.8, 5124.0], [58.9, 5139.0], [59.0, 5142.0], [59.1, 5142.0], [59.2, 5148.0], [59.3, 5149.0], [59.4, 5160.0], [59.5, 5239.0], [59.6, 5239.0], [59.7, 5302.0], [59.8, 5316.0], [59.9, 5318.0], [60.0, 5333.0], [60.1, 5333.0], [60.2, 5347.0], [60.3, 5350.0], [60.4, 5352.0], [60.5, 5358.0], [60.6, 5358.0], [60.7, 5359.0], [60.8, 5384.0], [60.9, 5429.0], [61.0, 5431.0], [61.1, 5431.0], [61.2, 5441.0], [61.3, 5481.0], [61.4, 5486.0], [61.5, 5522.0], [61.6, 5522.0], [61.7, 5538.0], [61.8, 5548.0], [61.9, 5566.0], [62.0, 5580.0], [62.1, 5580.0], [62.2, 5629.0], [62.3, 5662.0], [62.4, 5667.0], [62.5, 5692.0], [62.6, 5692.0], [62.7, 5700.0], [62.8, 5713.0], [62.9, 5837.0], [63.0, 5854.0], [63.1, 5854.0], [63.2, 5859.0], [63.3, 5861.0], [63.4, 5863.0], [63.5, 5864.0], [63.6, 5864.0], [63.7, 5874.0], [63.8, 5886.0], [63.9, 5909.0], [64.0, 5912.0], [64.1, 5912.0], [64.2, 5916.0], [64.3, 5926.0], [64.4, 5957.0], [64.5, 5962.0], [64.6, 5962.0], [64.7, 5970.0], [64.8, 5978.0], [64.9, 6100.0], [65.0, 6148.0], [65.1, 6148.0], [65.2, 6182.0], [65.3, 6207.0], [65.4, 6216.0], [65.5, 6256.0], [65.6, 6256.0], [65.7, 6288.0], [65.8, 6325.0], [65.9, 6329.0], [66.0, 6330.0], [66.1, 6330.0], [66.2, 6351.0], [66.3, 6372.0], [66.4, 6426.0], [66.5, 6431.0], [66.6, 6431.0], [66.7, 6442.0], [66.8, 6469.0], [66.9, 6480.0], [67.0, 6521.0], [67.1, 6521.0], [67.2, 6526.0], [67.3, 6561.0], [67.4, 6605.0], [67.5, 6670.0], [67.6, 6670.0], [67.7, 6670.0], [67.8, 6680.0], [67.9, 6709.0], [68.0, 6751.0], [68.1, 6751.0], [68.2, 6761.0], [68.3, 6768.0], [68.4, 6773.0], [68.5, 6777.0], [68.6, 6777.0], [68.7, 6800.0], [68.8, 6823.0], [68.9, 6864.0], [69.0, 6891.0], [69.1, 6891.0], [69.2, 6907.0], [69.3, 6917.0], [69.4, 6921.0], [69.5, 6926.0], [69.6, 6926.0], [69.7, 6951.0], [69.8, 7009.0], [69.9, 7028.0], [70.0, 7057.0], [70.1, 7057.0], [70.2, 7074.0], [70.3, 7077.0], [70.4, 7079.0], [70.5, 7113.0], [70.6, 7113.0], [70.7, 7120.0], [70.8, 7120.0], [70.9, 7158.0], [71.0, 7160.0], [71.1, 7160.0], [71.2, 7173.0], [71.3, 7185.0], [71.4, 7218.0], [71.5, 7260.0], [71.6, 7260.0], [71.7, 7323.0], [71.8, 7325.0], [71.9, 7336.0], [72.0, 7351.0], [72.1, 7351.0], [72.2, 7396.0], [72.3, 7472.0], [72.4, 7479.0], [72.5, 7501.0], [72.6, 7501.0], [72.7, 7517.0], [72.8, 7517.0], [72.9, 7564.0], [73.0, 7574.0], [73.1, 7574.0], [73.2, 7600.0], [73.3, 7611.0], [73.4, 7626.0], [73.5, 7671.0], [73.6, 7671.0], [73.7, 7701.0], [73.8, 7723.0], [73.9, 7725.0], [74.0, 7763.0], [74.1, 7763.0], [74.2, 7778.0], [74.3, 7779.0], [74.4, 7791.0], [74.5, 7810.0], [74.6, 7810.0], [74.7, 7811.0], [74.8, 7838.0], [74.9, 7848.0], [75.0, 7857.0], [75.1, 7857.0], [75.2, 7859.0], [75.3, 7861.0], [75.4, 7862.0], [75.5, 7874.0], [75.6, 7874.0], [75.7, 7880.0], [75.8, 7885.0], [75.9, 7907.0], [76.0, 7908.0], [76.1, 7908.0], [76.2, 7910.0], [76.3, 7932.0], [76.4, 7941.0], [76.5, 8004.0], [76.6, 8004.0], [76.7, 8021.0], [76.8, 8083.0], [76.9, 8093.0], [77.0, 8100.0], [77.1, 8100.0], [77.2, 8109.0], [77.3, 8121.0], [77.4, 8123.0], [77.5, 8130.0], [77.6, 8130.0], [77.7, 8132.0], [77.8, 8133.0], [77.9, 8137.0], [78.0, 8139.0], [78.1, 8139.0], [78.2, 8141.0], [78.3, 8141.0], [78.4, 8142.0], [78.5, 8158.0], [78.6, 8158.0], [78.7, 8159.0], [78.8, 8164.0], [78.9, 8169.0], [79.0, 8174.0], [79.1, 8174.0], [79.2, 8178.0], [79.3, 8182.0], [79.4, 8197.0], [79.5, 8208.0], [79.6, 8208.0], [79.7, 8211.0], [79.8, 8221.0], [79.9, 8227.0], [80.0, 8236.0], [80.1, 8236.0], [80.2, 8260.0], [80.3, 8281.0], [80.4, 8317.0], [80.5, 8324.0], [80.6, 8324.0], [80.7, 8374.0], [80.8, 8384.0], [80.9, 8393.0], [81.0, 8407.0], [81.1, 8407.0], [81.2, 8411.0], [81.3, 8421.0], [81.4, 8423.0], [81.5, 8430.0], [81.6, 8430.0], [81.7, 8435.0], [81.8, 8491.0], [81.9, 8495.0], [82.0, 8496.0], [82.1, 8496.0], [82.2, 8498.0], [82.3, 8529.0], [82.4, 8546.0], [82.5, 8569.0], [82.6, 8569.0], [82.7, 8582.0], [82.8, 8613.0], [82.9, 8616.0], [83.0, 8617.0], [83.1, 8617.0], [83.2, 8618.0], [83.3, 8626.0], [83.4, 8627.0], [83.5, 8627.0], [83.6, 8627.0], [83.7, 8660.0], [83.8, 8694.0], [83.9, 8694.0], [84.0, 8697.0], [84.1, 8697.0], [84.2, 8698.0], [84.3, 8742.0], [84.4, 8759.0], [84.5, 8762.0], [84.6, 8762.0], [84.7, 8800.0], [84.8, 8810.0], [84.9, 8826.0], [85.0, 8832.0], [85.1, 8832.0], [85.2, 8833.0], [85.3, 8835.0], [85.4, 8888.0], [85.5, 8905.0], [85.6, 8905.0], [85.7, 8905.0], [85.8, 8913.0], [85.9, 8927.0], [86.0, 8928.0], [86.1, 8928.0], [86.2, 8931.0], [86.3, 8936.0], [86.4, 8971.0], [86.5, 8971.0], [86.6, 8971.0], [86.7, 8976.0], [86.8, 9010.0], [86.9, 9019.0], [87.0, 9023.0], [87.1, 9023.0], [87.2, 9025.0], [87.3, 9026.0], [87.4, 9046.0], [87.5, 9055.0], [87.6, 9055.0], [87.7, 9061.0], [87.8, 9076.0], [87.9, 9094.0], [88.0, 9113.0], [88.1, 9113.0], [88.2, 9165.0], [88.3, 9168.0], [88.4, 9169.0], [88.5, 9170.0], [88.6, 9170.0], [88.7, 9172.0], [88.8, 9172.0], [88.9, 9180.0], [89.0, 9181.0], [89.1, 9181.0], [89.2, 9198.0], [89.3, 9265.0], [89.4, 9309.0], [89.5, 9335.0], [89.6, 9335.0], [89.7, 9374.0], [89.8, 9388.0], [89.9, 9393.0], [90.0, 9399.0], [90.1, 9399.0], [90.2, 9415.0], [90.3, 9423.0], [90.4, 9426.0], [90.5, 9427.0], [90.6, 9427.0], [90.7, 9438.0], [90.8, 9464.0], [90.9, 9464.0], [91.0, 9466.0], [91.1, 9466.0], [91.2, 9468.0], [91.3, 9477.0], [91.4, 9489.0], [91.5, 9493.0], [91.6, 9493.0], [91.7, 9510.0], [91.8, 9510.0], [91.9, 9511.0], [92.0, 9530.0], [92.1, 9530.0], [92.2, 9561.0], [92.3, 9563.0], [92.4, 9564.0], [92.5, 9571.0], [92.6, 9571.0], [92.7, 9591.0], [92.8, 9593.0], [92.9, 9596.0], [93.0, 9607.0], [93.1, 9607.0], [93.2, 9612.0], [93.3, 9628.0], [93.4, 9653.0], [93.5, 9666.0], [93.6, 9666.0], [93.7, 9678.0], [93.8, 9684.0], [93.9, 9705.0], [94.0, 9706.0], [94.1, 9706.0], [94.2, 9718.0], [94.3, 9731.0], [94.4, 9739.0], [94.5, 9754.0], [94.6, 9754.0], [94.7, 9763.0], [94.8, 9789.0], [94.9, 9815.0], [95.0, 9861.0], [95.1, 9861.0], [95.2, 9863.0], [95.3, 9948.0], [95.4, 9981.0], [95.5, 9981.0], [95.6, 9981.0], [95.7, 10008.0], [95.8, 10033.0], [95.9, 10116.0], [96.0, 10152.0], [96.1, 10152.0], [96.2, 10353.0], [96.3, 10707.0], [96.4, 10757.0], [96.5, 10796.0], [96.6, 10796.0], [96.7, 10860.0], [96.8, 10868.0], [96.9, 10868.0], [97.0, 10874.0], [97.1, 10874.0], [97.2, 10895.0], [97.3, 10901.0], [97.4, 10921.0], [97.5, 11123.0], [97.6, 11123.0], [97.7, 11298.0], [97.8, 11361.0], [97.9, 11361.0], [98.0, 11398.0], [98.1, 11398.0], [98.2, 11436.0], [98.3, 11448.0], [98.4, 11459.0], [98.5, 11554.0], [98.6, 11554.0], [98.7, 11572.0], [98.8, 11787.0], [98.9, 11790.0], [99.0, 11817.0], [99.1, 11817.0], [99.2, 12213.0], [99.3, 12258.0], [99.4, 12277.0], [99.5, 12543.0], [99.6, 12543.0], [99.7, 12598.0], [99.8, 12646.0], [99.9, 12781.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 13.0], [0.1, 13.0], [0.2, 13.0], [0.3, 14.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 15.0], [1.1, 15.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 15.0], [2.1, 15.0], [2.2, 15.0], [2.3, 15.0], [2.4, 15.0], [2.5, 15.0], [2.6, 15.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 16.0], [3.2, 16.0], [3.3, 16.0], [3.4, 16.0], [3.5, 16.0], [3.6, 16.0], [3.7, 16.0], [3.8, 16.0], [3.9, 16.0], [4.0, 16.0], [4.1, 16.0], [4.2, 17.0], [4.3, 17.0], [4.4, 17.0], [4.5, 17.0], [4.6, 17.0], [4.7, 17.0], [4.8, 17.0], [4.9, 17.0], [5.0, 17.0], [5.1, 17.0], [5.2, 17.0], [5.3, 17.0], [5.4, 17.0], [5.5, 17.0], [5.6, 17.0], [5.7, 18.0], [5.8, 18.0], [5.9, 18.0], [6.0, 18.0], [6.1, 18.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 18.0], [7.4, 18.0], [7.5, 18.0], [7.6, 18.0], [7.7, 18.0], [7.8, 18.0], [7.9, 18.0], [8.0, 18.0], [8.1, 18.0], [8.2, 18.0], [8.3, 19.0], [8.4, 19.0], [8.5, 19.0], [8.6, 19.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 19.0], [9.1, 19.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 19.0], [9.6, 19.0], [9.7, 19.0], [9.8, 19.0], [9.9, 19.0], [10.0, 19.0], [10.1, 19.0], [10.2, 19.0], [10.3, 19.0], [10.4, 19.0], [10.5, 19.0], [10.6, 19.0], [10.7, 19.0], [10.8, 19.0], [10.9, 19.0], [11.0, 19.0], [11.1, 19.0], [11.2, 19.0], [11.3, 19.0], [11.4, 19.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 20.0], [11.9, 20.0], [12.0, 20.0], [12.1, 20.0], [12.2, 20.0], [12.3, 20.0], [12.4, 20.0], [12.5, 20.0], [12.6, 20.0], [12.7, 20.0], [12.8, 20.0], [12.9, 20.0], [13.0, 20.0], [13.1, 20.0], [13.2, 20.0], [13.3, 20.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 21.0], [15.0, 21.0], [15.1, 21.0], [15.2, 21.0], [15.3, 21.0], [15.4, 21.0], [15.5, 21.0], [15.6, 21.0], [15.7, 21.0], [15.8, 21.0], [15.9, 21.0], [16.0, 21.0], [16.1, 21.0], [16.2, 21.0], [16.3, 21.0], [16.4, 21.0], [16.5, 21.0], [16.6, 21.0], [16.7, 22.0], [16.8, 22.0], [16.9, 22.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 22.0], [17.4, 22.0], [17.5, 22.0], [17.6, 22.0], [17.7, 22.0], [17.8, 22.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 22.0], [18.4, 22.0], [18.5, 22.0], [18.6, 22.0], [18.7, 22.0], [18.8, 23.0], [18.9, 23.0], [19.0, 23.0], [19.1, 23.0], [19.2, 23.0], [19.3, 23.0], [19.4, 23.0], [19.5, 23.0], [19.6, 23.0], [19.7, 23.0], [19.8, 23.0], [19.9, 23.0], [20.0, 23.0], [20.1, 23.0], [20.2, 23.0], [20.3, 23.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 23.0], [20.8, 23.0], [20.9, 23.0], [21.0, 23.0], [21.1, 23.0], [21.2, 23.0], [21.3, 23.0], [21.4, 24.0], [21.5, 24.0], [21.6, 24.0], [21.7, 24.0], [21.8, 24.0], [21.9, 24.0], [22.0, 24.0], [22.1, 24.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 24.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 24.0], [23.3, 24.0], [23.4, 24.0], [23.5, 24.0], [23.6, 24.0], [23.7, 25.0], [23.8, 25.0], [23.9, 25.0], [24.0, 25.0], [24.1, 25.0], [24.2, 25.0], [24.3, 25.0], [24.4, 25.0], [24.5, 25.0], [24.6, 25.0], [24.7, 25.0], [24.8, 25.0], [24.9, 25.0], [25.0, 25.0], [25.1, 25.0], [25.2, 25.0], [25.3, 25.0], [25.4, 25.0], [25.5, 25.0], [25.6, 25.0], [25.7, 25.0], [25.8, 25.0], [25.9, 25.0], [26.0, 25.0], [26.1, 25.0], [26.2, 25.0], [26.3, 25.0], [26.4, 25.0], [26.5, 25.0], [26.6, 25.0], [26.7, 25.0], [26.8, 25.0], [26.9, 25.0], [27.0, 25.0], [27.1, 25.0], [27.2, 25.0], [27.3, 25.0], [27.4, 26.0], [27.5, 26.0], [27.6, 26.0], [27.7, 26.0], [27.8, 26.0], [27.9, 26.0], [28.0, 26.0], [28.1, 26.0], [28.2, 26.0], [28.3, 26.0], [28.4, 26.0], [28.5, 26.0], [28.6, 26.0], [28.7, 26.0], [28.8, 26.0], [28.9, 26.0], [29.0, 26.0], [29.1, 26.0], [29.2, 26.0], [29.3, 26.0], [29.4, 26.0], [29.5, 26.0], [29.6, 26.0], [29.7, 26.0], [29.8, 26.0], [29.9, 26.0], [30.0, 26.0], [30.1, 26.0], [30.2, 26.0], [30.3, 26.0], [30.4, 26.0], [30.5, 27.0], [30.6, 27.0], [30.7, 27.0], [30.8, 27.0], [30.9, 27.0], [31.0, 27.0], [31.1, 27.0], [31.2, 27.0], [31.3, 27.0], [31.4, 27.0], [31.5, 27.0], [31.6, 27.0], [31.7, 27.0], [31.8, 27.0], [31.9, 27.0], [32.0, 27.0], [32.1, 27.0], [32.2, 27.0], [32.3, 27.0], [32.4, 27.0], [32.5, 27.0], [32.6, 27.0], [32.7, 27.0], [32.8, 27.0], [32.9, 27.0], [33.0, 27.0], [33.1, 27.0], [33.2, 27.0], [33.3, 27.0], [33.4, 28.0], [33.5, 28.0], [33.6, 28.0], [33.7, 28.0], [33.8, 28.0], [33.9, 28.0], [34.0, 28.0], [34.1, 28.0], [34.2, 28.0], [34.3, 28.0], [34.4, 28.0], [34.5, 28.0], [34.6, 28.0], [34.7, 28.0], [34.8, 28.0], [34.9, 28.0], [35.0, 28.0], [35.1, 28.0], [35.2, 28.0], [35.3, 28.0], [35.4, 28.0], [35.5, 28.0], [35.6, 28.0], [35.7, 28.0], [35.8, 29.0], [35.9, 29.0], [36.0, 29.0], [36.1, 29.0], [36.2, 29.0], [36.3, 29.0], [36.4, 29.0], [36.5, 29.0], [36.6, 29.0], [36.7, 29.0], [36.8, 29.0], [36.9, 29.0], [37.0, 29.0], [37.1, 29.0], [37.2, 30.0], [37.3, 30.0], [37.4, 30.0], [37.5, 30.0], [37.6, 30.0], [37.7, 30.0], [37.8, 30.0], [37.9, 30.0], [38.0, 30.0], [38.1, 30.0], [38.2, 30.0], [38.3, 30.0], [38.4, 30.0], [38.5, 30.0], [38.6, 30.0], [38.7, 30.0], [38.8, 30.0], [38.9, 30.0], [39.0, 30.0], [39.1, 30.0], [39.2, 30.0], [39.3, 30.0], [39.4, 31.0], [39.5, 31.0], [39.6, 31.0], [39.7, 31.0], [39.8, 31.0], [39.9, 31.0], [40.0, 31.0], [40.1, 31.0], [40.2, 31.0], [40.3, 31.0], [40.4, 31.0], [40.5, 31.0], [40.6, 31.0], [40.7, 31.0], [40.8, 31.0], [40.9, 31.0], [41.0, 31.0], [41.1, 31.0], [41.2, 31.0], [41.3, 31.0], [41.4, 31.0], [41.5, 31.0], [41.6, 31.0], [41.7, 31.0], [41.8, 31.0], [41.9, 31.0], [42.0, 31.0], [42.1, 31.0], [42.2, 31.0], [42.3, 32.0], [42.4, 32.0], [42.5, 32.0], [42.6, 32.0], [42.7, 32.0], [42.8, 32.0], [42.9, 32.0], [43.0, 32.0], [43.1, 32.0], [43.2, 32.0], [43.3, 32.0], [43.4, 32.0], [43.5, 32.0], [43.6, 32.0], [43.7, 32.0], [43.8, 32.0], [43.9, 32.0], [44.0, 32.0], [44.1, 32.0], [44.2, 32.0], [44.3, 32.0], [44.4, 32.0], [44.5, 32.0], [44.6, 32.0], [44.7, 32.0], [44.8, 32.0], [44.9, 32.0], [45.0, 33.0], [45.1, 33.0], [45.2, 33.0], [45.3, 33.0], [45.4, 33.0], [45.5, 33.0], [45.6, 33.0], [45.7, 33.0], [45.8, 33.0], [45.9, 33.0], [46.0, 33.0], [46.1, 33.0], [46.2, 33.0], [46.3, 33.0], [46.4, 33.0], [46.5, 33.0], [46.6, 33.0], [46.7, 33.0], [46.8, 33.0], [46.9, 34.0], [47.0, 34.0], [47.1, 34.0], [47.2, 34.0], [47.3, 34.0], [47.4, 34.0], [47.5, 34.0], [47.6, 34.0], [47.7, 34.0], [47.8, 34.0], [47.9, 34.0], [48.0, 34.0], [48.1, 34.0], [48.2, 34.0], [48.3, 34.0], [48.4, 34.0], [48.5, 34.0], [48.6, 34.0], [48.7, 34.0], [48.8, 35.0], [48.9, 35.0], [49.0, 35.0], [49.1, 35.0], [49.2, 35.0], [49.3, 35.0], [49.4, 35.0], [49.5, 35.0], [49.6, 35.0], [49.7, 35.0], [49.8, 35.0], [49.9, 35.0], [50.0, 35.0], [50.1, 35.0], [50.2, 35.0], [50.3, 35.0], [50.4, 35.0], [50.5, 35.0], [50.6, 35.0], [50.7, 35.0], [50.8, 35.0], [50.9, 35.0], [51.0, 36.0], [51.1, 36.0], [51.2, 36.0], [51.3, 36.0], [51.4, 36.0], [51.5, 36.0], [51.6, 36.0], [51.7, 36.0], [51.8, 36.0], [51.9, 36.0], [52.0, 36.0], [52.1, 36.0], [52.2, 36.0], [52.3, 36.0], [52.4, 36.0], [52.5, 36.0], [52.6, 36.0], [52.7, 36.0], [52.8, 36.0], [52.9, 37.0], [53.0, 37.0], [53.1, 37.0], [53.2, 37.0], [53.3, 37.0], [53.4, 37.0], [53.5, 37.0], [53.6, 37.0], [53.7, 37.0], [53.8, 37.0], [53.9, 37.0], [54.0, 37.0], [54.1, 37.0], [54.2, 37.0], [54.3, 37.0], [54.4, 37.0], [54.5, 37.0], [54.6, 37.0], [54.7, 37.0], [54.8, 37.0], [54.9, 37.0], [55.0, 37.0], [55.1, 37.0], [55.2, 37.0], [55.3, 37.0], [55.4, 38.0], [55.5, 38.0], [55.6, 38.0], [55.7, 38.0], [55.8, 38.0], [55.9, 38.0], [56.0, 38.0], [56.1, 38.0], [56.2, 38.0], [56.3, 38.0], [56.4, 38.0], [56.5, 38.0], [56.6, 38.0], [56.7, 38.0], [56.8, 38.0], [56.9, 38.0], [57.0, 38.0], [57.1, 38.0], [57.2, 38.0], [57.3, 38.0], [57.4, 39.0], [57.5, 39.0], [57.6, 39.0], [57.7, 39.0], [57.8, 39.0], [57.9, 39.0], [58.0, 39.0], [58.1, 39.0], [58.2, 39.0], [58.3, 39.0], [58.4, 39.0], [58.5, 39.0], [58.6, 39.0], [58.7, 39.0], [58.8, 39.0], [58.9, 39.0], [59.0, 39.0], [59.1, 39.0], [59.2, 40.0], [59.3, 40.0], [59.4, 40.0], [59.5, 40.0], [59.6, 40.0], [59.7, 40.0], [59.8, 40.0], [59.9, 40.0], [60.0, 40.0], [60.1, 40.0], [60.2, 40.0], [60.3, 40.0], [60.4, 40.0], [60.5, 40.0], [60.6, 40.0], [60.7, 40.0], [60.8, 41.0], [60.9, 41.0], [61.0, 41.0], [61.1, 41.0], [61.2, 41.0], [61.3, 41.0], [61.4, 41.0], [61.5, 41.0], [61.6, 41.0], [61.7, 41.0], [61.8, 41.0], [61.9, 41.0], [62.0, 41.0], [62.1, 41.0], [62.2, 41.0], [62.3, 42.0], [62.4, 42.0], [62.5, 42.0], [62.6, 42.0], [62.7, 42.0], [62.8, 42.0], [62.9, 42.0], [63.0, 42.0], [63.1, 42.0], [63.2, 42.0], [63.3, 42.0], [63.4, 42.0], [63.5, 42.0], [63.6, 42.0], [63.7, 42.0], [63.8, 42.0], [63.9, 42.0], [64.0, 42.0], [64.1, 42.0], [64.2, 42.0], [64.3, 42.0], [64.4, 42.0], [64.5, 42.0], [64.6, 42.0], [64.7, 43.0], [64.8, 43.0], [64.9, 43.0], [65.0, 43.0], [65.1, 43.0], [65.2, 43.0], [65.3, 43.0], [65.4, 43.0], [65.5, 43.0], [65.6, 43.0], [65.7, 43.0], [65.8, 43.0], [65.9, 43.0], [66.0, 43.0], [66.1, 43.0], [66.2, 43.0], [66.3, 44.0], [66.4, 44.0], [66.5, 44.0], [66.6, 44.0], [66.7, 44.0], [66.8, 44.0], [66.9, 44.0], [67.0, 44.0], [67.1, 44.0], [67.2, 44.0], [67.3, 44.0], [67.4, 45.0], [67.5, 45.0], [67.6, 45.0], [67.7, 45.0], [67.8, 45.0], [67.9, 45.0], [68.0, 45.0], [68.1, 45.0], [68.2, 45.0], [68.3, 45.0], [68.4, 45.0], [68.5, 46.0], [68.6, 46.0], [68.7, 46.0], [68.8, 47.0], [68.9, 47.0], [69.0, 47.0], [69.1, 47.0], [69.2, 47.0], [69.3, 47.0], [69.4, 47.0], [69.5, 47.0], [69.6, 47.0], [69.7, 47.0], [69.8, 47.0], [69.9, 47.0], [70.0, 47.0], [70.1, 47.0], [70.2, 48.0], [70.3, 48.0], [70.4, 48.0], [70.5, 48.0], [70.6, 48.0], [70.7, 48.0], [70.8, 48.0], [70.9, 48.0], [71.0, 49.0], [71.1, 49.0], [71.2, 49.0], [71.3, 49.0], [71.4, 49.0], [71.5, 49.0], [71.6, 49.0], [71.7, 49.0], [71.8, 49.0], [71.9, 49.0], [72.0, 49.0], [72.1, 49.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 51.0], [73.0, 51.0], [73.1, 51.0], [73.2, 51.0], [73.3, 51.0], [73.4, 51.0], [73.5, 51.0], [73.6, 51.0], [73.7, 51.0], [73.8, 51.0], [73.9, 51.0], [74.0, 51.0], [74.1, 51.0], [74.2, 51.0], [74.3, 51.0], [74.4, 51.0], [74.5, 51.0], [74.6, 51.0], [74.7, 51.0], [74.8, 52.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 52.0], [75.3, 52.0], [75.4, 53.0], [75.5, 53.0], [75.6, 53.0], [75.7, 53.0], [75.8, 53.0], [75.9, 53.0], [76.0, 54.0], [76.1, 54.0], [76.2, 54.0], [76.3, 54.0], [76.4, 54.0], [76.5, 54.0], [76.6, 54.0], [76.7, 54.0], [76.8, 54.0], [76.9, 55.0], [77.0, 55.0], [77.1, 55.0], [77.2, 55.0], [77.3, 55.0], [77.4, 55.0], [77.5, 55.0], [77.6, 55.0], [77.7, 56.0], [77.8, 56.0], [77.9, 56.0], [78.0, 56.0], [78.1, 56.0], [78.2, 56.0], [78.3, 57.0], [78.4, 57.0], [78.5, 57.0], [78.6, 57.0], [78.7, 57.0], [78.8, 57.0], [78.9, 57.0], [79.0, 58.0], [79.1, 58.0], [79.2, 58.0], [79.3, 58.0], [79.4, 58.0], [79.5, 59.0], [79.6, 59.0], [79.7, 59.0], [79.8, 59.0], [79.9, 60.0], [80.0, 60.0], [80.1, 60.0], [80.2, 60.0], [80.3, 60.0], [80.4, 60.0], [80.5, 60.0], [80.6, 60.0], [80.7, 60.0], [80.8, 60.0], [80.9, 60.0], [81.0, 60.0], [81.1, 60.0], [81.2, 60.0], [81.3, 61.0], [81.4, 61.0], [81.5, 61.0], [81.6, 61.0], [81.7, 62.0], [81.8, 63.0], [81.9, 63.0], [82.0, 63.0], [82.1, 63.0], [82.2, 63.0], [82.3, 63.0], [82.4, 63.0], [82.5, 65.0], [82.6, 65.0], [82.7, 65.0], [82.8, 65.0], [82.9, 65.0], [83.0, 65.0], [83.1, 65.0], [83.2, 65.0], [83.3, 66.0], [83.4, 66.0], [83.5, 66.0], [83.6, 66.0], [83.7, 67.0], [83.8, 67.0], [83.9, 67.0], [84.0, 68.0], [84.1, 68.0], [84.2, 68.0], [84.3, 68.0], [84.4, 68.0], [84.5, 68.0], [84.6, 68.0], [84.7, 68.0], [84.8, 70.0], [84.9, 70.0], [85.0, 71.0], [85.1, 71.0], [85.2, 71.0], [85.3, 71.0], [85.4, 72.0], [85.5, 72.0], [85.6, 72.0], [85.7, 72.0], [85.8, 72.0], [85.9, 73.0], [86.0, 73.0], [86.1, 73.0], [86.2, 73.0], [86.3, 73.0], [86.4, 73.0], [86.5, 74.0], [86.6, 74.0], [86.7, 74.0], [86.8, 74.0], [86.9, 75.0], [87.0, 77.0], [87.1, 77.0], [87.2, 77.0], [87.3, 77.0], [87.4, 78.0], [87.5, 78.0], [87.6, 78.0], [87.7, 79.0], [87.8, 80.0], [87.9, 80.0], [88.0, 81.0], [88.1, 81.0], [88.2, 81.0], [88.3, 82.0], [88.4, 83.0], [88.5, 83.0], [88.6, 83.0], [88.7, 84.0], [88.8, 84.0], [88.9, 85.0], [89.0, 85.0], [89.1, 85.0], [89.2, 85.0], [89.3, 86.0], [89.4, 86.0], [89.5, 87.0], [89.6, 87.0], [89.7, 87.0], [89.8, 87.0], [89.9, 88.0], [90.0, 89.0], [90.1, 89.0], [90.2, 89.0], [90.3, 89.0], [90.4, 90.0], [90.5, 92.0], [90.6, 92.0], [90.7, 92.0], [90.8, 92.0], [90.9, 93.0], [91.0, 94.0], [91.1, 94.0], [91.2, 94.0], [91.3, 94.0], [91.4, 95.0], [91.5, 95.0], [91.6, 95.0], [91.7, 97.0], [91.8, 97.0], [91.9, 97.0], [92.0, 98.0], [92.1, 98.0], [92.2, 98.0], [92.3, 99.0], [92.4, 100.0], [92.5, 100.0], [92.6, 100.0], [92.7, 101.0], [92.8, 104.0], [92.9, 104.0], [93.0, 104.0], [93.1, 104.0], [93.2, 105.0], [93.3, 106.0], [93.4, 107.0], [93.5, 109.0], [93.6, 109.0], [93.7, 110.0], [93.8, 113.0], [93.9, 114.0], [94.0, 116.0], [94.1, 116.0], [94.2, 116.0], [94.3, 116.0], [94.4, 117.0], [94.5, 118.0], [94.6, 118.0], [94.7, 131.0], [94.8, 136.0], [94.9, 148.0], [95.0, 167.0], [95.1, 167.0], [95.2, 167.0], [95.3, 169.0], [95.4, 176.0], [95.5, 181.0], [95.6, 181.0], [95.7, 181.0], [95.8, 183.0], [95.9, 185.0], [96.0, 189.0], [96.1, 189.0], [96.2, 189.0], [96.3, 190.0], [96.4, 192.0], [96.5, 193.0], [96.6, 193.0], [96.7, 193.0], [96.8, 201.0], [96.9, 207.0], [97.0, 215.0], [97.1, 215.0], [97.2, 215.0], [97.3, 215.0], [97.4, 223.0], [97.5, 232.0], [97.6, 232.0], [97.7, 232.0], [97.8, 445.0], [97.9, 539.0], [98.0, 550.0], [98.1, 550.0], [98.2, 717.0], [98.3, 808.0], [98.4, 816.0], [98.5, 875.0], [98.6, 875.0], [98.7, 973.0], [98.8, 1007.0], [98.9, 1167.0], [99.0, 1175.0], [99.1, 1175.0], [99.2, 1187.0], [99.3, 1199.0], [99.4, 1489.0], [99.5, 1532.0], [99.6, 1532.0], [99.7, 4509.0], [99.8, 5124.0], [99.9, 5175.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 739.0, "series": [{"data": [[0.0, 60.0], [100.0, 67.0], [200.0, 3.0], [300.0, 2.0], [400.0, 3.0], [500.0, 3.0], [600.0, 3.0], [700.0, 4.0], [800.0, 6.0], [900.0, 4.0], [1000.0, 3.0], [1100.0, 7.0], [1200.0, 26.0], [1300.0, 17.0], [1400.0, 17.0], [1500.0, 20.0], [1600.0, 3.0], [1700.0, 5.0], [1800.0, 7.0], [1900.0, 5.0], [2000.0, 2.0], [2100.0, 5.0], [2300.0, 11.0], [2200.0, 9.0], [2400.0, 27.0], [2500.0, 5.0], [2600.0, 5.0], [2800.0, 17.0], [2700.0, 18.0], [2900.0, 17.0], [3000.0, 6.0], [3100.0, 7.0], [3200.0, 8.0], [3300.0, 5.0], [3400.0, 4.0], [3500.0, 9.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 5.0], [4200.0, 3.0], [4100.0, 2.0], [4300.0, 2.0], [4600.0, 5.0], [4500.0, 3.0], [4400.0, 2.0], [4800.0, 3.0], [4700.0, 1.0], [5000.0, 6.0], [4900.0, 7.0], [5100.0, 6.0], [5300.0, 10.0], [5200.0, 1.0], [5400.0, 5.0], [5600.0, 4.0], [5500.0, 5.0], [5800.0, 8.0], [5700.0, 2.0], [5900.0, 8.0], [6100.0, 3.0], [6300.0, 5.0], [6200.0, 4.0], [6500.0, 3.0], [6400.0, 5.0], [6600.0, 4.0], [6700.0, 6.0], [6800.0, 4.0], [6900.0, 5.0], [7000.0, 6.0], [7100.0, 7.0], [7300.0, 5.0], [7200.0, 2.0], [7400.0, 2.0], [7500.0, 5.0], [7600.0, 4.0], [7700.0, 7.0], [7800.0, 11.0], [7900.0, 5.0], [8000.0, 4.0], [8100.0, 20.0], [8300.0, 5.0], [8400.0, 10.0], [8700.0, 3.0], [8500.0, 4.0], [8600.0, 12.0], [8200.0, 7.0], [8800.0, 7.0], [9000.0, 10.0], [9100.0, 10.0], [8900.0, 10.0], [9200.0, 1.0], [9400.0, 12.0], [9300.0, 6.0], [9600.0, 7.0], [9500.0, 11.0], [9700.0, 8.0], [10000.0, 2.0], [9900.0, 3.0], [10100.0, 2.0], [9800.0, 3.0], [10700.0, 3.0], [10300.0, 1.0], [10900.0, 2.0], [11100.0, 1.0], [11200.0, 1.0], [10800.0, 5.0], [11300.0, 3.0], [11400.0, 3.0], [11500.0, 2.0], [11700.0, 2.0], [12200.0, 3.0], [11800.0, 1.0], [12500.0, 2.0], [12600.0, 1.0], [12700.0, 1.0]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[0.0, 739.0], [700.0, 1.0], [200.0, 8.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 4.0], [4500.0, 1.0], [5100.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [100.0, 35.0], [400.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 103.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 918.0, "series": [{"data": [[0.0, 918.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 103.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 579.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 228.69812500000037, "minX": 1.7119062E12, "maxY": 228.69812500000037, "series": [{"data": [[1.7119062E12, 228.69812500000037]], "isOverall": false, "label": "MyfirstTestPlanThreadCount800", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7119062E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 10868.0, "series": [{"data": [[5.0, 3510.0], [7.0, 2971.6666666666665], [8.0, 3368.5], [12.0, 3187.0], [13.0, 3155.8], [16.0, 6709.0], [17.0, 3540.0], [19.0, 3412.0], [24.0, 4606.333333333333], [25.0, 3064.5], [28.0, 2965.25], [29.0, 2913.0], [31.0, 2895.0], [34.0, 2861.5], [39.0, 2820.6666666666665], [40.0, 2784.0], [45.0, 2726.5], [44.0, 2746.5], [46.0, 2712.0], [50.0, 2698.8333333333335], [52.0, 2666.0], [57.0, 2827.2], [61.0, 2677.25], [67.0, 2769.0], [69.0, 3055.0], [68.0, 2906.0], [79.0, 2152.0], [78.0, 2988.0], [83.0, 2927.6666666666665], [82.0, 2954.0], [81.0, 2961.8], [85.0, 2641.5], [84.0, 2880.0], [90.0, 5962.0], [88.0, 2299.5], [95.0, 3252.1428571428573], [99.0, 2226.0], [101.0, 2318.0], [111.0, 2465.0000000000005], [110.0, 2324.0], [123.0, 2413.0], [122.0, 2429.0], [121.0, 2442.0], [120.0, 2483.5], [127.0, 2428.777777777778], [135.0, 2345.0], [134.0, 6526.0], [130.0, 2362.5], [143.0, 1517.0], [140.0, 1741.0], [139.0, 2186.6666666666665], [149.0, 1581.2857142857142], [153.0, 1179.0], [152.0, 1398.5], [167.0, 2013.0], [173.0, 2418.0], [172.0, 1539.75], [171.0, 1547.0], [170.0, 1436.2], [169.0, 1566.0], [183.0, 5926.0], [181.0, 2939.3333333333335], [179.0, 1710.5], [176.0, 1621.6666666666667], [186.0, 7452.1], [187.0, 6128.2], [185.0, 5694.8], [184.0, 3358.5], [191.0, 1580.0], [195.0, 9399.0], [194.0, 3696.625], [192.0, 6484.5], [196.0, 1348.0], [207.0, 7388.045454545454], [205.0, 7397.5], [203.0, 3677.0], [200.0, 4733.0], [202.0, 3726.666666666667], [206.0, 142.0], [204.0, 1265.0], [215.0, 3520.375], [214.0, 2499.25], [211.0, 2996.1111111111113], [210.0, 5260.777777777777], [209.0, 4683.0], [213.0, 1460.3333333333335], [208.0, 1471.0], [222.0, 6823.0], [220.0, 4093.8], [219.0, 3703.625], [217.0, 700.0], [218.0, 4037.4999999999995], [216.0, 280.5], [223.0, 1179.0], [231.0, 6769.5], [229.0, 6176.0], [228.0, 4108.0], [225.0, 4185.75], [224.0, 385.5], [226.0, 4646.0], [227.0, 7701.789473684212], [230.0, 8534.720000000001], [238.0, 6691.0], [239.0, 2162.25], [232.0, 930.0], [237.0, 10868.0], [236.0, 1211.5], [246.0, 7789.2], [247.0, 5425.0], [244.0, 6002.333333333333], [243.0, 6964.333333333333], [242.0, 6406.5], [245.0, 1966.3529411764703], [251.0, 4903.75], [250.0, 5683.666666666667], [248.0, 8170.076923076924], [249.0, 8393.0], [255.0, 5348.0], [254.0, 2104.0], [253.0, 4465.5], [252.0, 7345.0], [270.0, 7986.5], [269.0, 7426.5], [259.0, 3591.9], [258.0, 7511.0], [256.0, 7545.692307692308], [257.0, 8146.400000000001], [266.0, 4960.0], [267.0, 1988.3333333333335], [265.0, 8840.333333333334], [263.0, 4944.6], [264.0, 8863.0], [261.0, 6355.0], [260.0, 4929.857142857143], [262.0, 7469.0], [284.0, 4666.0], [286.0, 5189.0], [287.0, 4075.0], [285.0, 4972.0], [283.0, 5846.25], [282.0, 7985.5], [278.0, 4495.0], [279.0, 1735.6666666666665], [272.0, 111.0], [275.0, 7139.5], [273.0, 4977.75], [276.0, 5405.0], [301.0, 101.0], [303.0, 6521.0], [300.0, 6115.25], [297.0, 6115.5], [298.0, 7859.0], [299.0, 3715.5000000000005], [293.0, 6213.0], [292.0, 159.5], [291.0, 7932.0], [288.0, 2223.0], [289.0, 2692.625], [290.0, 7779.0], [316.0, 7113.0], [319.0, 4615.5], [318.0, 3879.5], [317.0, 6480.0], [311.0, 6896.5], [310.0, 2891.0], [308.0, 3853.2], [307.0, 4640.0], [304.0, 7449.333333333333], [335.0, 3503.0], [334.0, 4988.0], [331.0, 3079.6], [330.0, 7054.5], [329.0, 3743.0], [327.0, 1811.0], [351.0, 4157.0], [349.0, 3395.6666666666665], [348.0, 2732.0], [345.0, 7120.0], [341.0, 6593.0], [340.0, 1404.0], [339.0, 5819.0], [337.0, 1464.0], [364.0, 6917.0], [363.0, 4001.0], [361.0, 5062.4], [359.0, 6921.0], [355.0, 4811.25], [354.0, 6605.0], [380.0, 1766.25], [370.0, 3799.2307692307695], [368.0, 7057.0], [371.0, 6751.0], [373.0, 3455.7142857142853], [374.0, 5744.0], [375.0, 94.0], [376.0, 84.0], [377.0, 101.0], [379.0, 4158.0], [378.0, 3377.0], [382.0, 2719.5], [383.0, 5079.0], [396.0, 5302.666666666667], [384.0, 76.5], [387.0, 5030.6], [385.0, 86.0], [389.0, 99.0], [390.0, 101.66666666666667], [391.0, 802.0], [397.0, 2910.0], [395.0, 4535.875000000001], [393.0, 5589.0], [392.0, 2979.0], [402.0, 1010.6], [403.0, 271.5], [405.0, 102.0], [407.0, 88.33333333333333], [408.0, 129.0], [423.0, 135.0], [435.0, 140.83333333333334]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[230.7375000000002, 4424.943750000003]], "isOverall": false, "label": "ProductSearch-Aggregated", "isController": false}, {"data": [[3.0, 16.5], [4.0, 17.0], [5.0, 22.0], [7.0, 25.0], [8.0, 26.0], [9.0, 26.0], [10.0, 21.0], [11.0, 16.0], [12.0, 26.0], [13.0, 53.0], [14.0, 21.0], [15.0, 21.0], [16.0, 57.0], [17.0, 39.0], [18.0, 25.0], [19.0, 21.0], [20.0, 24.0], [21.0, 18.0], [22.0, 38.0], [23.0, 30.0], [24.0, 21.0], [25.0, 25.0], [26.0, 36.0], [27.0, 26.0], [28.0, 27.0], [29.0, 18.0], [30.0, 38.0], [31.0, 37.0], [33.0, 45.0], [32.0, 47.0], [35.0, 41.0], [34.0, 28.0], [37.0, 51.0], [36.0, 37.0], [39.0, 35.0], [38.0, 32.0], [41.0, 25.0], [40.0, 23.0], [43.0, 41.0], [45.0, 55.0], [44.0, 39.5], [47.0, 17.0], [46.0, 27.0], [48.0, 26.0], [51.0, 16.0], [50.0, 25.5], [53.0, 25.0], [52.0, 28.0], [55.0, 21.0], [54.0, 21.0], [57.0, 19.0], [56.0, 18.0], [59.0, 25.0], [58.0, 23.0], [61.0, 26.0], [60.0, 28.0], [63.0, 19.0], [62.0, 23.0], [67.0, 27.0], [66.0, 27.0], [65.0, 32.0], [71.0, 31.0], [70.0, 19.0], [69.0, 19.0], [68.0, 43.0], [75.0, 29.0], [74.0, 28.0], [73.0, 31.0], [79.0, 47.0], [78.0, 31.0], [77.0, 32.0], [76.0, 30.0], [83.0, 36.0], [82.0, 39.0], [81.0, 45.0], [80.0, 40.0], [87.0, 41.0], [86.0, 57.0], [85.0, 20.0], [84.0, 17.0], [91.0, 23.0], [90.0, 21.0], [89.0, 27.0], [88.0, 32.0], [95.0, 38.0], [94.0, 29.0], [93.0, 32.0], [92.0, 35.0], [99.0, 68.0], [98.0, 63.0], [97.0, 39.0], [96.0, 34.0], [103.0, 35.0], [102.0, 32.0], [101.0, 39.0], [100.0, 60.0], [107.0, 18.5], [105.0, 24.0], [104.0, 27.0], [111.0, 45.0], [110.0, 41.0], [108.0, 20.0], [115.0, 49.5], [112.0, 22.0], [119.0, 88.5], [118.0, 63.0], [116.0, 56.5], [123.0, 38.0], [122.0, 42.0], [121.0, 54.0], [120.0, 94.0], [127.0, 19.0], [126.0, 16.5], [124.0, 21.0], [135.0, 22.0], [134.0, 20.0], [133.0, 26.0], [132.0, 31.0], [131.0, 16.0], [130.0, 28.0], [129.0, 48.0], [128.0, 49.0], [143.0, 148.0], [142.0, 17.0], [141.0, 21.0], [140.0, 24.0], [139.0, 30.0], [138.0, 34.0], [137.0, 32.0], [151.0, 34.0], [150.0, 40.0], [149.0, 78.0], [148.0, 76.0], [146.0, 80.0], [145.0, 81.0], [144.0, 84.0], [159.0, 18.0], [158.0, 20.0], [157.0, 26.0], [155.0, 20.0], [154.0, 25.0], [153.0, 51.0], [152.0, 37.0], [167.0, 19.0], [166.0, 24.0], [165.0, 26.0], [164.0, 19.0], [163.0, 27.0], [162.0, 25.0], [161.0, 16.0], [160.0, 21.0], [175.0, 37.0], [174.0, 19.0], [173.0, 25.0], [172.0, 22.0], [171.0, 25.0], [170.0, 33.0], [169.0, 32.0], [168.0, 24.0], [183.0, 98.0], [182.0, 106.0], [181.0, 116.0], [180.0, 116.0], [179.0, 113.0], [178.0, 118.0], [177.0, 65.0], [176.0, 36.0], [191.0, 90.5], [190.0, 79.0], [189.0, 34.5], [188.0, 30.0], [187.0, 207.24999999999997], [186.0, 22.444444444444443], [185.0, 27.0], [184.0, 56.33333333333333], [199.0, 87.0], [198.0, 77.5], [197.0, 91.0], [195.0, 84.66666666666667], [192.0, 45.0], [196.0, 36.0], [194.0, 63.0], [193.0, 71.0], [207.0, 134.875], [206.0, 53.333333333333336], [205.0, 331.75], [204.0, 41.75], [203.0, 54.666666666666664], [202.0, 77.0], [201.0, 96.5], [200.0, 71.66666666666667], [215.0, 47.0], [214.0, 36.5], [213.0, 43.285714285714285], [212.0, 46.625], [211.0, 38.27272727272728], [210.0, 45.71428571428572], [209.0, 31.999999999999996], [208.0, 28.833333333333332], [223.0, 236.0], [222.0, 39.0], [220.0, 32.42857142857143], [219.0, 37.0], [218.0, 38.8], [217.0, 41.5], [216.0, 33.42857142857143], [221.0, 40.666666666666664], [231.0, 238.0], [230.0, 39.0], [229.0, 172.5], [228.0, 49.333333333333336], [227.0, 39.888888888888886], [225.0, 66.75], [226.0, 39.0], [224.0, 41.8], [239.0, 26.0], [238.0, 33.0], [237.0, 36.25], [236.0, 43.0], [235.0, 48.0], [234.0, 31.0], [233.0, 32.0], [232.0, 40.55555555555556], [247.0, 77.44444444444444], [246.0, 36.0], [245.0, 52.42857142857142], [244.0, 39.0], [243.0, 39.699999999999996], [242.0, 34.0], [241.0, 43.75], [240.0, 1150.5], [255.0, 54.16666666666667], [254.0, 25.666666666666668], [253.0, 37.75], [252.0, 54.33333333333333], [251.0, 1051.6], [250.0, 685.875], [249.0, 45.14285714285714], [248.0, 27.77777777777778], [270.0, 43.2], [271.0, 33.0], [269.0, 35.333333333333336], [268.0, 45.8], [267.0, 38.666666666666664], [266.0, 33.25], [265.0, 22.0], [264.0, 23.0], [263.0, 31.0], [257.0, 74.25], [256.0, 78.33333333333333], [259.0, 49.0], [258.0, 54.75], [262.0, 37.25], [261.0, 28.4], [260.0, 61.0], [286.0, 24.0], [287.0, 23.333333333333332], [285.0, 31.0], [284.0, 26.666666666666668], [283.0, 47.0], [281.0, 42.0], [280.0, 35.0], [279.0, 25.0], [273.0, 48.0], [272.0, 44.0], [275.0, 29.0], [274.0, 34.0], [278.0, 31.0], [277.0, 39.0], [276.0, 42.0], [302.0, 25.5], [303.0, 36.0], [301.0, 29.0], [300.0, 30.5], [299.0, 49.0], [298.0, 42.5], [297.0, 55.0], [296.0, 58.0], [295.0, 47.0], [289.0, 39.666666666666664], [288.0, 28.25], [291.0, 136.0], [290.0, 42.0], [294.0, 43.0], [293.0, 41.0], [292.0, 44.0], [318.0, 35.0], [319.0, 25.0], [317.0, 42.0], [316.0, 24.0], [315.0, 21.0], [314.0, 24.0], [313.0, 18.0], [312.0, 1187.0], [311.0, 594.5], [305.0, 29.5], [304.0, 40.0], [307.0, 42.0], [306.0, 39.0], [309.0, 411.66666666666663], [308.0, 37.0], [334.0, 30.0], [335.0, 26.0], [333.0, 18.0], [332.0, 19.0], [331.0, 973.0], [330.0, 31.0], [329.0, 1007.0], [328.0, 47.0], [327.0, 53.0], [321.0, 54.0], [320.0, 52.0], [323.0, 67.0], [322.0, 55.0], [326.0, 58.0], [325.0, 72.0], [324.0, 70.0], [350.0, 14.0], [351.0, 1532.0], [349.0, 31.0], [348.0, 40.0], [347.0, 31.0], [346.0, 32.0], [345.0, 42.0], [344.0, 27.0], [343.0, 20.0], [337.0, 39.0], [336.0, 43.0], [339.0, 22.0], [338.0, 14.0], [342.0, 26.0], [341.0, 27.0], [340.0, 875.0], [366.0, 28.0], [367.0, 26.0], [365.0, 34.0], [364.0, 539.0], [363.0, 23.0], [362.0, 21.0], [361.0, 36.5], [360.0, 42.0], [359.0, 35.0], [353.0, 26.0], [352.0, 717.0], [355.0, 27.0], [354.0, 24.0], [358.0, 26.0], [357.0, 14.0], [356.0, 31.0], [382.0, 26.5], [373.0, 39.5], [372.0, 44.0], [374.0, 68.0], [375.0, 38.0], [377.0, 33.0], [378.0, 32.5], [380.0, 33.333333333333336], [371.0, 55.0], [370.0, 35.0], [369.0, 38.0], [368.0, 19.5], [383.0, 56.0], [376.0, 24.0], [381.0, 24.0], [379.0, 55.0], [385.0, 36.666666666666664], [389.0, 54.0], [388.0, 44.0], [390.0, 37.0], [391.0, 45.666666666666664], [384.0, 78.0], [397.0, 18.0], [396.0, 83.0], [387.0, 21.0], [386.0, 20.0], [395.0, 189.0], [394.0, 131.0], [393.0, 75.5], [392.0, 43.0], [415.0, 201.0], [414.0, 169.0], [413.0, 202.0], [411.0, 167.0], [410.0, 180.0], [408.0, 213.33333333333334], [406.0, 185.5], [405.0, 207.0], [431.0, 35.0], [430.0, 51.0], [429.0, 51.0], [420.0, 183.0], [419.0, 187.0], [418.0, 176.0], [417.0, 215.0], [416.0, 192.0], [432.0, 32.0], [1.0, 14.0]], "isOverall": false, "label": "GetUser", "isController": false}, {"data": [[226.65874999999994, 79.99375]], "isOverall": false, "label": "GetUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 435.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3306.6666666666665, "minX": 1.7119062E12, "maxY": 41040.0, "series": [{"data": [[1.7119062E12, 41040.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7119062E12, 3306.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7119062E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 79.99375, "minX": 1.7119062E12, "maxY": 4424.943750000003, "series": [{"data": [[1.7119062E12, 4424.943750000003]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.7119062E12, 79.99375]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7119062E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 79.95249999999994, "minX": 1.7119062E12, "maxY": 4424.543750000002, "series": [{"data": [[1.7119062E12, 4424.543750000002]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.7119062E12, 79.95249999999994]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7119062E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7119062E12, "maxY": 3851.1187500000005, "series": [{"data": [[1.7119062E12, 3851.1187500000005]], "isOverall": false, "label": "ProductSearch", "isController": false}, {"data": [[1.7119062E12, 0.0]], "isOverall": false, "label": "GetUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7119062E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.7119062E12, "maxY": 12781.0, "series": [{"data": [[1.7119062E12, 12781.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7119062E12, 8235.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7119062E12, 11397.630000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7119062E12, 9398.699999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7119062E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7119062E12, 100.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7119062E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 31.0, "maxY": 954.0, "series": [{"data": [[67.0, 115.0], [133.0, 717.0], [141.0, 82.0], [147.0, 128.0], [148.0, 47.0], [152.0, 86.5], [163.0, 87.0], [174.0, 954.0], [168.0, 126.0], [102.0, 73.0], [31.0, 107.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 174.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 31.0, "maxY": 954.0, "series": [{"data": [[67.0, 115.0], [133.0, 717.0], [141.0, 82.0], [147.0, 128.0], [148.0, 47.0], [152.0, 86.5], [163.0, 87.0], [174.0, 954.0], [168.0, 126.0], [102.0, 72.5], [31.0, 106.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 174.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.7119062E12, "maxY": 26.666666666666668, "series": [{"data": [[1.7119062E12, 26.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7119062E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.7119062E12, "maxY": 26.666666666666668, "series": [{"data": [[1.7119062E12, 26.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7119062E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.7119062E12, "maxY": 13.333333333333334, "series": [{"data": [[1.7119062E12, 13.333333333333334]], "isOverall": false, "label": "GetUser-success", "isController": false}, {"data": [[1.7119062E12, 13.333333333333334]], "isOverall": false, "label": "ProductSearch-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7119062E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.7119062E12, "maxY": 26.666666666666668, "series": [{"data": [[1.7119062E12, 26.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7119062E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

